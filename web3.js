/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/@solana/web3.js@1.98.0/lib/index.browser.cjs.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var buffer=require("buffer"),ed25519=require("@noble/curves/ed25519"),BN=require("bn.js"),bs58=require("bs58"),sha256=require("@noble/hashes/sha256"),borsh=require("borsh"),BufferLayout=require("@solana/buffer-layout"),bigintBuffer=require("bigint-buffer"),superstruct=require("superstruct"),RpcClient=require("jayson/lib/client/browser"),rpcWebsockets=require("rpc-websockets"),sha3=require("@noble/hashes/sha3"),secp256k1=require("@noble/curves/secp256k1");function _interopDefaultCompat(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function _interopNamespaceCompat(e){if(e&&"object"==typeof e&&"default"in e)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var s=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var BN__default=_interopDefaultCompat(BN),bs58__default=_interopDefaultCompat(bs58),BufferLayout__namespace=_interopNamespaceCompat(BufferLayout),RpcClient__default=_interopDefaultCompat(RpcClient);const generatePrivateKey=ed25519.ed25519.utils.randomPrivateKey,generateKeypair=()=>{const e=ed25519.ed25519.utils.randomPrivateKey(),t=getPublicKey(e),r=new Uint8Array(64);return r.set(e),r.set(t,32),{publicKey:t,secretKey:r}},getPublicKey=ed25519.ed25519.getPublicKey;function isOnCurve(e){try{return ed25519.ed25519.ExtendedPoint.fromHex(e),!0}catch{return!1}}const sign=(e,t)=>ed25519.ed25519.sign(e,t.slice(0,32)),verify=ed25519.ed25519.verify,toBuffer=e=>buffer.Buffer.isBuffer(e)?e:e instanceof Uint8Array?buffer.Buffer.from(e.buffer,e.byteOffset,e.byteLength):buffer.Buffer.from(e);class Struct{constructor(e){Object.assign(this,e)}encode(){return buffer.Buffer.from(borsh.serialize(SOLANA_SCHEMA,this))}static decode(e){return borsh.deserialize(SOLANA_SCHEMA,this,e)}static decodeUnchecked(e){return borsh.deserializeUnchecked(SOLANA_SCHEMA,this,e)}}class Enum extends Struct{constructor(e){if(super(e),this.enum="",1!==Object.keys(e).length)throw new Error("Enum can only take single value");Object.keys(e).map((e=>{this.enum=e}))}}const SOLANA_SCHEMA=new Map;var _PublicKey;const MAX_SEED_LENGTH=32,PUBLIC_KEY_LENGTH=32;function isPublicKeyData(e){return void 0!==e._bn}let uniquePublicKeyCounter=1;class PublicKey extends Struct{constructor(e){if(super({}),this._bn=void 0,isPublicKeyData(e))this._bn=e._bn;else{if("string"==typeof e){const t=bs58__default.default.decode(e);if(32!=t.length)throw new Error("Invalid public key input");this._bn=new BN__default.default(t)}else this._bn=new BN__default.default(e);if(this._bn.byteLength()>32)throw new Error("Invalid public key input")}}static unique(){const e=new PublicKey(uniquePublicKeyCounter);return uniquePublicKeyCounter+=1,new PublicKey(e.toBuffer())}equals(e){return this._bn.eq(e._bn)}toBase58(){return bs58__default.default.encode(this.toBytes())}toJSON(){return this.toBase58()}toBytes(){const e=this.toBuffer();return new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}toBuffer(){const e=this._bn.toArrayLike(buffer.Buffer);if(32===e.length)return e;const t=buffer.Buffer.alloc(32);return e.copy(t,32-e.length),t}get[Symbol.toStringTag](){return`PublicKey(${this.toString()})`}toString(){return this.toBase58()}static async createWithSeed(e,t,r){const s=buffer.Buffer.concat([e.toBuffer(),buffer.Buffer.from(t),r.toBuffer()]),n=sha256.sha256(s);return new PublicKey(n)}static createProgramAddressSync(e,t){let r=buffer.Buffer.alloc(0);e.forEach((function(e){if(e.length>32)throw new TypeError("Max seed length exceeded");r=buffer.Buffer.concat([r,toBuffer(e)])})),r=buffer.Buffer.concat([r,t.toBuffer(),buffer.Buffer.from("ProgramDerivedAddress")]);const s=sha256.sha256(r);if(isOnCurve(s))throw new Error("Invalid seeds, address must fall off the curve");return new PublicKey(s)}static async createProgramAddress(e,t){return this.createProgramAddressSync(e,t)}static findProgramAddressSync(e,t){let r,s=255;for(;0!=s;){try{const n=e.concat(buffer.Buffer.from([s]));r=this.createProgramAddressSync(n,t)}catch(e){if(e instanceof TypeError)throw e;s--;continue}return[r,s]}throw new Error("Unable to find a viable program address nonce")}static async findProgramAddress(e,t){return this.findProgramAddressSync(e,t)}static isOnCurve(e){return isOnCurve(new PublicKey(e).toBytes())}}_PublicKey=PublicKey,PublicKey.default=new _PublicKey("11111111111111111111111111111111"),SOLANA_SCHEMA.set(PublicKey,{kind:"struct",fields:[["_bn","u256"]]});class Account{constructor(e){if(this._publicKey=void 0,this._secretKey=void 0,e){const t=toBuffer(e);if(64!==e.length)throw new Error("bad secret key size");this._publicKey=t.slice(32,64),this._secretKey=t.slice(0,32)}else this._secretKey=toBuffer(generatePrivateKey()),this._publicKey=toBuffer(getPublicKey(this._secretKey))}get publicKey(){return new PublicKey(this._publicKey)}get secretKey(){return buffer.Buffer.concat([this._secretKey,this._publicKey],64)}}const BPF_LOADER_DEPRECATED_PROGRAM_ID=new PublicKey("BPFLoader1111111111111111111111111111111111"),PACKET_DATA_SIZE=1232,VERSION_PREFIX_MASK=127,SIGNATURE_LENGTH_IN_BYTES=64;class TransactionExpiredBlockheightExceededError extends Error{constructor(e){super(`Signature ${e} has expired: block height exceeded.`),this.signature=void 0,this.signature=e}}Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype,"name",{value:"TransactionExpiredBlockheightExceededError"});class TransactionExpiredTimeoutError extends Error{constructor(e,t){super(`Transaction was not confirmed in ${t.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${e} using the Solana Explorer or CLI tools.`),this.signature=void 0,this.signature=e}}Object.defineProperty(TransactionExpiredTimeoutError.prototype,"name",{value:"TransactionExpiredTimeoutError"});class TransactionExpiredNonceInvalidError extends Error{constructor(e){super(`Signature ${e} has expired: the nonce is no longer valid.`),this.signature=void 0,this.signature=e}}Object.defineProperty(TransactionExpiredNonceInvalidError.prototype,"name",{value:"TransactionExpiredNonceInvalidError"});class MessageAccountKeys{constructor(e,t){this.staticAccountKeys=void 0,this.accountKeysFromLookups=void 0,this.staticAccountKeys=e,this.accountKeysFromLookups=t}keySegments(){const e=[this.staticAccountKeys];return this.accountKeysFromLookups&&(e.push(this.accountKeysFromLookups.writable),e.push(this.accountKeysFromLookups.readonly)),e}get(e){for(const t of this.keySegments()){if(e<t.length)return t[e];e-=t.length}}get length(){return this.keySegments().flat().length}compileInstructions(e){if(this.length>256)throw new Error("Account index overflow encountered during compilation");const t=new Map;this.keySegments().flat().forEach(((e,r)=>{t.set(e.toBase58(),r)}));const r=e=>{const r=t.get(e.toBase58());if(void 0===r)throw new Error("Encountered an unknown instruction account key during compilation");return r};return e.map((e=>({programIdIndex:r(e.programId),accountKeyIndexes:e.keys.map((e=>r(e.pubkey))),data:e.data})))}}const publicKey=(e="publicKey")=>BufferLayout__namespace.blob(32,e),signature=(e="signature")=>BufferLayout__namespace.blob(64,e),rustString=(e="string")=>{const t=BufferLayout__namespace.struct([BufferLayout__namespace.u32("length"),BufferLayout__namespace.u32("lengthPadding"),BufferLayout__namespace.blob(BufferLayout__namespace.offset(BufferLayout__namespace.u32(),-8),"chars")],e),r=t.decode.bind(t),s=t.encode.bind(t),n=t;return n.decode=(e,t)=>r(e,t).chars.toString(),n.encode=(e,t,r)=>{const n={chars:buffer.Buffer.from(e,"utf8")};return s(n,t,r)},n.alloc=e=>BufferLayout__namespace.u32().span+BufferLayout__namespace.u32().span+buffer.Buffer.from(e,"utf8").length,n},authorized=(e="authorized")=>BufferLayout__namespace.struct([publicKey("staker"),publicKey("withdrawer")],e),lockup=(e="lockup")=>BufferLayout__namespace.struct([BufferLayout__namespace.ns64("unixTimestamp"),BufferLayout__namespace.ns64("epoch"),publicKey("custodian")],e),voteInit=(e="voteInit")=>BufferLayout__namespace.struct([publicKey("nodePubkey"),publicKey("authorizedVoter"),publicKey("authorizedWithdrawer"),BufferLayout__namespace.u8("commission")],e),voteAuthorizeWithSeedArgs=(e="voteAuthorizeWithSeedArgs")=>BufferLayout__namespace.struct([BufferLayout__namespace.u32("voteAuthorizationType"),publicKey("currentAuthorityDerivedKeyOwnerPubkey"),rustString("currentAuthorityDerivedKeySeed"),publicKey("newAuthorized")],e);function getAlloc(e,t){const r=e=>{if(e.span>=0)return e.span;if("function"==typeof e.alloc)return e.alloc(t[e.property]);if("count"in e&&"elementLayout"in e){const s=t[e.property];if(Array.isArray(s))return s.length*r(e.elementLayout)}else if("fields"in e)return getAlloc({layout:e},t[e.property]);return 0};let s=0;return e.layout.fields.forEach((e=>{s+=r(e)})),s}function decodeLength(e){let t=0,r=0;for(;;){let s=e.shift();if(t|=(127&s)<<7*r,r+=1,!(128&s))break}return t}function encodeLength(e,t){let r=t;for(;;){let t=127&r;if(r>>=7,0==r){e.push(t);break}t|=128,e.push(t)}}function assert(e,t){if(!e)throw new Error(t||"Assertion failed")}class CompiledKeys{constructor(e,t){this.payer=void 0,this.keyMetaMap=void 0,this.payer=e,this.keyMetaMap=t}static compile(e,t){const r=new Map,s=e=>{const t=e.toBase58();let s=r.get(t);return void 0===s&&(s={isSigner:!1,isWritable:!1,isInvoked:!1},r.set(t,s)),s},n=s(t);n.isSigner=!0,n.isWritable=!0;for(const t of e){s(t.programId).isInvoked=!0;for(const e of t.keys){const t=s(e.pubkey);t.isSigner||=e.isSigner,t.isWritable||=e.isWritable}}return new CompiledKeys(t,r)}getMessageComponents(){const e=[...this.keyMetaMap.entries()];assert(e.length<=256,"Max static account keys length exceeded");const t=e.filter((([,e])=>e.isSigner&&e.isWritable)),r=e.filter((([,e])=>e.isSigner&&!e.isWritable)),s=e.filter((([,e])=>!e.isSigner&&e.isWritable)),n=e.filter((([,e])=>!e.isSigner&&!e.isWritable)),o={numRequiredSignatures:t.length+r.length,numReadonlySignedAccounts:r.length,numReadonlyUnsignedAccounts:n.length};{assert(t.length>0,"Expected at least one writable signer key");const[e]=t[0];assert(e===this.payer.toBase58(),"Expected first writable signer key to be the fee payer")}return[o,[...t.map((([e])=>new PublicKey(e))),...r.map((([e])=>new PublicKey(e))),...s.map((([e])=>new PublicKey(e))),...n.map((([e])=>new PublicKey(e)))]]}extractTableLookup(e){const[t,r]=this.drainKeysFoundInLookupTable(e.state.addresses,(e=>!e.isSigner&&!e.isInvoked&&e.isWritable)),[s,n]=this.drainKeysFoundInLookupTable(e.state.addresses,(e=>!e.isSigner&&!e.isInvoked&&!e.isWritable));if(0!==t.length||0!==s.length)return[{accountKey:e.key,writableIndexes:t,readonlyIndexes:s},{writable:r,readonly:n}]}drainKeysFoundInLookupTable(e,t){const r=new Array,s=new Array;for(const[n,o]of this.keyMetaMap.entries())if(t(o)){const t=new PublicKey(n),o=e.findIndex((e=>e.equals(t)));o>=0&&(assert(o<256,"Max lookup table index exceeded"),r.push(o),s.push(t),this.keyMetaMap.delete(n))}return[r,s]}}const END_OF_BUFFER_ERROR_MESSAGE="Reached end of buffer unexpectedly";function guardedShift(e){if(0===e.length)throw new Error(END_OF_BUFFER_ERROR_MESSAGE);return e.shift()}function guardedSplice(e,...t){const[r]=t;if(2===t.length?r+(t[1]??0)>e.length:r>=e.length)throw new Error(END_OF_BUFFER_ERROR_MESSAGE);return e.splice(...t)}class Message{constructor(e){this.header=void 0,this.accountKeys=void 0,this.recentBlockhash=void 0,this.instructions=void 0,this.indexToProgramIds=new Map,this.header=e.header,this.accountKeys=e.accountKeys.map((e=>new PublicKey(e))),this.recentBlockhash=e.recentBlockhash,this.instructions=e.instructions,this.instructions.forEach((e=>this.indexToProgramIds.set(e.programIdIndex,this.accountKeys[e.programIdIndex])))}get version(){return"legacy"}get staticAccountKeys(){return this.accountKeys}get compiledInstructions(){return this.instructions.map((e=>({programIdIndex:e.programIdIndex,accountKeyIndexes:e.accounts,data:bs58__default.default.decode(e.data)})))}get addressTableLookups(){return[]}getAccountKeys(){return new MessageAccountKeys(this.staticAccountKeys)}static compile(e){const t=CompiledKeys.compile(e.instructions,e.payerKey),[r,s]=t.getMessageComponents(),n=new MessageAccountKeys(s).compileInstructions(e.instructions).map((e=>({programIdIndex:e.programIdIndex,accounts:e.accountKeyIndexes,data:bs58__default.default.encode(e.data)})));return new Message({header:r,accountKeys:s,recentBlockhash:e.recentBlockhash,instructions:n})}isAccountSigner(e){return e<this.header.numRequiredSignatures}isAccountWritable(e){const t=this.header.numRequiredSignatures;if(e>=this.header.numRequiredSignatures){return e-t<this.accountKeys.length-t-this.header.numReadonlyUnsignedAccounts}return e<t-this.header.numReadonlySignedAccounts}isProgramId(e){return this.indexToProgramIds.has(e)}programIds(){return[...this.indexToProgramIds.values()]}nonProgramIds(){return this.accountKeys.filter(((e,t)=>!this.isProgramId(t)))}serialize(){const e=this.accountKeys.length;let t=[];encodeLength(t,e);const r=this.instructions.map((e=>{const{accounts:t,programIdIndex:r}=e,s=Array.from(bs58__default.default.decode(e.data));let n=[];encodeLength(n,t.length);let o=[];return encodeLength(o,s.length),{programIdIndex:r,keyIndicesCount:buffer.Buffer.from(n),keyIndices:t,dataLength:buffer.Buffer.from(o),data:s}}));let s=[];encodeLength(s,r.length);let n=buffer.Buffer.alloc(1232);buffer.Buffer.from(s).copy(n);let o=s.length;r.forEach((e=>{const t=BufferLayout__namespace.struct([BufferLayout__namespace.u8("programIdIndex"),BufferLayout__namespace.blob(e.keyIndicesCount.length,"keyIndicesCount"),BufferLayout__namespace.seq(BufferLayout__namespace.u8("keyIndex"),e.keyIndices.length,"keyIndices"),BufferLayout__namespace.blob(e.dataLength.length,"dataLength"),BufferLayout__namespace.seq(BufferLayout__namespace.u8("userdatum"),e.data.length,"data")]).encode(e,n,o);o+=t})),n=n.slice(0,o);const a=BufferLayout__namespace.struct([BufferLayout__namespace.blob(1,"numRequiredSignatures"),BufferLayout__namespace.blob(1,"numReadonlySignedAccounts"),BufferLayout__namespace.blob(1,"numReadonlyUnsignedAccounts"),BufferLayout__namespace.blob(t.length,"keyCount"),BufferLayout__namespace.seq(publicKey("key"),e,"keys"),publicKey("recentBlockhash")]),i={numRequiredSignatures:buffer.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:buffer.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:buffer.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:buffer.Buffer.from(t),keys:this.accountKeys.map((e=>toBuffer(e.toBytes()))),recentBlockhash:bs58__default.default.decode(this.recentBlockhash)};let u=buffer.Buffer.alloc(2048);const c=a.encode(i,u);return n.copy(u,c),u.slice(0,c+n.length)}static from(e){let t=[...e];const r=guardedShift(t);if(r!==(127&r))throw new Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");const s=guardedShift(t),n=guardedShift(t),o=decodeLength(t);let a=[];for(let e=0;e<o;e++){const e=guardedSplice(t,0,32);a.push(new PublicKey(buffer.Buffer.from(e)))}const i=guardedSplice(t,0,32),u=decodeLength(t);let c=[];for(let e=0;e<u;e++){const e=guardedShift(t),r=guardedSplice(t,0,decodeLength(t)),s=guardedSplice(t,0,decodeLength(t)),n=bs58__default.default.encode(buffer.Buffer.from(s));c.push({programIdIndex:e,accounts:r,data:n})}const l={header:{numRequiredSignatures:r,numReadonlySignedAccounts:s,numReadonlyUnsignedAccounts:n},recentBlockhash:bs58__default.default.encode(buffer.Buffer.from(i)),accountKeys:a,instructions:c};return new Message(l)}}class MessageV0{constructor(e){this.header=void 0,this.staticAccountKeys=void 0,this.recentBlockhash=void 0,this.compiledInstructions=void 0,this.addressTableLookups=void 0,this.header=e.header,this.staticAccountKeys=e.staticAccountKeys,this.recentBlockhash=e.recentBlockhash,this.compiledInstructions=e.compiledInstructions,this.addressTableLookups=e.addressTableLookups}get version(){return 0}get numAccountKeysFromLookups(){let e=0;for(const t of this.addressTableLookups)e+=t.readonlyIndexes.length+t.writableIndexes.length;return e}getAccountKeys(e){let t;if(e&&"accountKeysFromLookups"in e&&e.accountKeysFromLookups){if(this.numAccountKeysFromLookups!=e.accountKeysFromLookups.writable.length+e.accountKeysFromLookups.readonly.length)throw new Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");t=e.accountKeysFromLookups}else if(e&&"addressLookupTableAccounts"in e&&e.addressLookupTableAccounts)t=this.resolveAddressTableLookups(e.addressLookupTableAccounts);else if(this.addressTableLookups.length>0)throw new Error("Failed to get account keys because address table lookups were not resolved");return new MessageAccountKeys(this.staticAccountKeys,t)}isAccountSigner(e){return e<this.header.numRequiredSignatures}isAccountWritable(e){const t=this.header.numRequiredSignatures,r=this.staticAccountKeys.length;if(e>=r){return e-r<this.addressTableLookups.reduce(((e,t)=>e+t.writableIndexes.length),0)}if(e>=this.header.numRequiredSignatures){return e-t<r-t-this.header.numReadonlyUnsignedAccounts}return e<t-this.header.numReadonlySignedAccounts}resolveAddressTableLookups(e){const t={writable:[],readonly:[]};for(const r of this.addressTableLookups){const s=e.find((e=>e.key.equals(r.accountKey)));if(!s)throw new Error(`Failed to find address lookup table account for table key ${r.accountKey.toBase58()}`);for(const e of r.writableIndexes){if(!(e<s.state.addresses.length))throw new Error(`Failed to find address for index ${e} in address lookup table ${r.accountKey.toBase58()}`);t.writable.push(s.state.addresses[e])}for(const e of r.readonlyIndexes){if(!(e<s.state.addresses.length))throw new Error(`Failed to find address for index ${e} in address lookup table ${r.accountKey.toBase58()}`);t.readonly.push(s.state.addresses[e])}}return t}static compile(e){const t=CompiledKeys.compile(e.instructions,e.payerKey),r=new Array,s={writable:new Array,readonly:new Array},n=e.addressLookupTableAccounts||[];for(const e of n){const n=t.extractTableLookup(e);if(void 0!==n){const[e,{writable:t,readonly:o}]=n;r.push(e),s.writable.push(...t),s.readonly.push(...o)}}const[o,a]=t.getMessageComponents(),i=new MessageAccountKeys(a,s).compileInstructions(e.instructions);return new MessageV0({header:o,staticAccountKeys:a,recentBlockhash:e.recentBlockhash,compiledInstructions:i,addressTableLookups:r})}serialize(){const e=Array();encodeLength(e,this.staticAccountKeys.length);const t=this.serializeInstructions(),r=Array();encodeLength(r,this.compiledInstructions.length);const s=this.serializeAddressTableLookups(),n=Array();encodeLength(n,this.addressTableLookups.length);const o=BufferLayout__namespace.struct([BufferLayout__namespace.u8("prefix"),BufferLayout__namespace.struct([BufferLayout__namespace.u8("numRequiredSignatures"),BufferLayout__namespace.u8("numReadonlySignedAccounts"),BufferLayout__namespace.u8("numReadonlyUnsignedAccounts")],"header"),BufferLayout__namespace.blob(e.length,"staticAccountKeysLength"),BufferLayout__namespace.seq(publicKey(),this.staticAccountKeys.length,"staticAccountKeys"),publicKey("recentBlockhash"),BufferLayout__namespace.blob(r.length,"instructionsLength"),BufferLayout__namespace.blob(t.length,"serializedInstructions"),BufferLayout__namespace.blob(n.length,"addressTableLookupsLength"),BufferLayout__namespace.blob(s.length,"serializedAddressTableLookups")]),a=new Uint8Array(1232),i=o.encode({prefix:128,header:this.header,staticAccountKeysLength:new Uint8Array(e),staticAccountKeys:this.staticAccountKeys.map((e=>e.toBytes())),recentBlockhash:bs58__default.default.decode(this.recentBlockhash),instructionsLength:new Uint8Array(r),serializedInstructions:t,addressTableLookupsLength:new Uint8Array(n),serializedAddressTableLookups:s},a);return a.slice(0,i)}serializeInstructions(){let e=0;const t=new Uint8Array(1232);for(const r of this.compiledInstructions){const s=Array();encodeLength(s,r.accountKeyIndexes.length);const n=Array();encodeLength(n,r.data.length);e+=BufferLayout__namespace.struct([BufferLayout__namespace.u8("programIdIndex"),BufferLayout__namespace.blob(s.length,"encodedAccountKeyIndexesLength"),BufferLayout__namespace.seq(BufferLayout__namespace.u8(),r.accountKeyIndexes.length,"accountKeyIndexes"),BufferLayout__namespace.blob(n.length,"encodedDataLength"),BufferLayout__namespace.blob(r.data.length,"data")]).encode({programIdIndex:r.programIdIndex,encodedAccountKeyIndexesLength:new Uint8Array(s),accountKeyIndexes:r.accountKeyIndexes,encodedDataLength:new Uint8Array(n),data:r.data},t,e)}return t.slice(0,e)}serializeAddressTableLookups(){let e=0;const t=new Uint8Array(1232);for(const r of this.addressTableLookups){const s=Array();encodeLength(s,r.writableIndexes.length);const n=Array();encodeLength(n,r.readonlyIndexes.length);e+=BufferLayout__namespace.struct([publicKey("accountKey"),BufferLayout__namespace.blob(s.length,"encodedWritableIndexesLength"),BufferLayout__namespace.seq(BufferLayout__namespace.u8(),r.writableIndexes.length,"writableIndexes"),BufferLayout__namespace.blob(n.length,"encodedReadonlyIndexesLength"),BufferLayout__namespace.seq(BufferLayout__namespace.u8(),r.readonlyIndexes.length,"readonlyIndexes")]).encode({accountKey:r.accountKey.toBytes(),encodedWritableIndexesLength:new Uint8Array(s),writableIndexes:r.writableIndexes,encodedReadonlyIndexesLength:new Uint8Array(n),readonlyIndexes:r.readonlyIndexes},t,e)}return t.slice(0,e)}static deserialize(e){let t=[...e];const r=guardedShift(t),s=127&r;assert(r!==s,"Expected versioned message but received legacy message");assert(0===s,`Expected versioned message with version 0 but found version ${s}`);const n={numRequiredSignatures:guardedShift(t),numReadonlySignedAccounts:guardedShift(t),numReadonlyUnsignedAccounts:guardedShift(t)},o=[],a=decodeLength(t);for(let e=0;e<a;e++)o.push(new PublicKey(guardedSplice(t,0,32)));const i=bs58__default.default.encode(guardedSplice(t,0,32)),u=decodeLength(t),c=[];for(let e=0;e<u;e++){const e=guardedShift(t),r=guardedSplice(t,0,decodeLength(t)),s=decodeLength(t),n=new Uint8Array(guardedSplice(t,0,s));c.push({programIdIndex:e,accountKeyIndexes:r,data:n})}const l=decodeLength(t),p=[];for(let e=0;e<l;e++){const e=new PublicKey(guardedSplice(t,0,32)),r=guardedSplice(t,0,decodeLength(t)),s=guardedSplice(t,0,decodeLength(t));p.push({accountKey:e,writableIndexes:r,readonlyIndexes:s})}return new MessageV0({header:n,staticAccountKeys:o,recentBlockhash:i,compiledInstructions:c,addressTableLookups:p})}}const VersionedMessage={deserializeMessageVersion(e){const t=e[0],r=127&t;return r===t?"legacy":r},deserialize:e=>{const t=VersionedMessage.deserializeMessageVersion(e);if("legacy"===t)return Message.from(e);if(0===t)return MessageV0.deserialize(e);throw new Error(`Transaction message version ${t} deserialization is not supported`)}};let TransactionStatus=function(e){return e[e.BLOCKHEIGHT_EXCEEDED=0]="BLOCKHEIGHT_EXCEEDED",e[e.PROCESSED=1]="PROCESSED",e[e.TIMED_OUT=2]="TIMED_OUT",e[e.NONCE_INVALID=3]="NONCE_INVALID",e}({});const DEFAULT_SIGNATURE=buffer.Buffer.alloc(64).fill(0);class TransactionInstruction{constructor(e){this.keys=void 0,this.programId=void 0,this.data=buffer.Buffer.alloc(0),this.programId=e.programId,this.keys=e.keys,e.data&&(this.data=e.data)}toJSON(){return{keys:this.keys.map((({pubkey:e,isSigner:t,isWritable:r})=>({pubkey:e.toJSON(),isSigner:t,isWritable:r}))),programId:this.programId.toJSON(),data:[...this.data]}}}class Transaction{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(e){if(this.signatures=[],this.feePayer=void 0,this.instructions=[],this.recentBlockhash=void 0,this.lastValidBlockHeight=void 0,this.nonceInfo=void 0,this.minNonceContextSlot=void 0,this._message=void 0,this._json=void 0,e)if(e.feePayer&&(this.feePayer=e.feePayer),e.signatures&&(this.signatures=e.signatures),Object.prototype.hasOwnProperty.call(e,"nonceInfo")){const{minContextSlot:t,nonceInfo:r}=e;this.minNonceContextSlot=t,this.nonceInfo=r}else if(Object.prototype.hasOwnProperty.call(e,"lastValidBlockHeight")){const{blockhash:t,lastValidBlockHeight:r}=e;this.recentBlockhash=t,this.lastValidBlockHeight=r}else{const{recentBlockhash:t,nonceInfo:r}=e;r&&(this.nonceInfo=r),this.recentBlockhash=t}}toJSON(){return{recentBlockhash:this.recentBlockhash||null,feePayer:this.feePayer?this.feePayer.toJSON():null,nonceInfo:this.nonceInfo?{nonce:this.nonceInfo.nonce,nonceInstruction:this.nonceInfo.nonceInstruction.toJSON()}:null,instructions:this.instructions.map((e=>e.toJSON())),signers:this.signatures.map((({publicKey:e})=>e.toJSON()))}}add(...e){if(0===e.length)throw new Error("No instructions");return e.forEach((e=>{"instructions"in e?this.instructions=this.instructions.concat(e.instructions):"data"in e&&"programId"in e&&"keys"in e?this.instructions.push(e):this.instructions.push(new TransactionInstruction(e))})),this}compileMessage(){if(this._message&&JSON.stringify(this.toJSON())===JSON.stringify(this._json))return this._message;let e,t,r;if(this.nonceInfo?(e=this.nonceInfo.nonce,t=this.instructions[0]!=this.nonceInfo.nonceInstruction?[this.nonceInfo.nonceInstruction,...this.instructions]:this.instructions):(e=this.recentBlockhash,t=this.instructions),!e)throw new Error("Transaction recentBlockhash required");if(t.length<1&&console.warn("No instructions provided"),this.feePayer)r=this.feePayer;else{if(!(this.signatures.length>0&&this.signatures[0].publicKey))throw new Error("Transaction fee payer required");r=this.signatures[0].publicKey}for(let e=0;e<t.length;e++)if(void 0===t[e].programId)throw new Error(`Transaction instruction index ${e} has undefined program id`);const s=[],n=[];t.forEach((e=>{e.keys.forEach((e=>{n.push({...e})}));const t=e.programId.toString();s.includes(t)||s.push(t)})),s.forEach((e=>{n.push({pubkey:new PublicKey(e),isSigner:!1,isWritable:!1})}));const o=[];n.forEach((e=>{const t=e.pubkey.toString(),r=o.findIndex((e=>e.pubkey.toString()===t));r>-1?(o[r].isWritable=o[r].isWritable||e.isWritable,o[r].isSigner=o[r].isSigner||e.isSigner):o.push(e)})),o.sort((function(e,t){if(e.isSigner!==t.isSigner)return e.isSigner?-1:1;if(e.isWritable!==t.isWritable)return e.isWritable?-1:1;return e.pubkey.toBase58().localeCompare(t.pubkey.toBase58(),"en",{localeMatcher:"best fit",usage:"sort",sensitivity:"variant",ignorePunctuation:!1,numeric:!1,caseFirst:"lower"})}));const a=o.findIndex((e=>e.pubkey.equals(r)));if(a>-1){const[e]=o.splice(a,1);e.isSigner=!0,e.isWritable=!0,o.unshift(e)}else o.unshift({pubkey:r,isSigner:!0,isWritable:!0});for(const e of this.signatures){const t=o.findIndex((t=>t.pubkey.equals(e.publicKey)));if(!(t>-1))throw new Error(`unknown signer: ${e.publicKey.toString()}`);o[t].isSigner||(o[t].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."))}let i=0,u=0,c=0;const l=[],p=[];o.forEach((({pubkey:e,isSigner:t,isWritable:r})=>{t?(l.push(e.toString()),i+=1,r||(u+=1)):(p.push(e.toString()),r||(c+=1))}));const d=l.concat(p),h=t.map((e=>{const{data:t,programId:r}=e;return{programIdIndex:d.indexOf(r.toString()),accounts:e.keys.map((e=>d.indexOf(e.pubkey.toString()))),data:bs58__default.default.encode(t)}}));return h.forEach((e=>{assert(e.programIdIndex>=0),e.accounts.forEach((e=>assert(e>=0)))})),new Message({header:{numRequiredSignatures:i,numReadonlySignedAccounts:u,numReadonlyUnsignedAccounts:c},accountKeys:d,recentBlockhash:e,instructions:h})}_compile(){const e=this.compileMessage(),t=e.accountKeys.slice(0,e.header.numRequiredSignatures);if(this.signatures.length===t.length){if(this.signatures.every(((e,r)=>t[r].equals(e.publicKey))))return e}return this.signatures=t.map((e=>({signature:null,publicKey:e}))),e}serializeMessage(){return this._compile().serialize()}async getEstimatedFee(e){return(await e.getFeeForMessage(this.compileMessage())).value}setSigners(...e){if(0===e.length)throw new Error("No signers");const t=new Set;this.signatures=e.filter((e=>{const r=e.toString();return!t.has(r)&&(t.add(r),!0)})).map((e=>({signature:null,publicKey:e})))}sign(...e){if(0===e.length)throw new Error("No signers");const t=new Set,r=[];for(const s of e){const e=s.publicKey.toString();t.has(e)||(t.add(e),r.push(s))}this.signatures=r.map((e=>({signature:null,publicKey:e.publicKey})));const s=this._compile();this._partialSign(s,...r)}partialSign(...e){if(0===e.length)throw new Error("No signers");const t=new Set,r=[];for(const s of e){const e=s.publicKey.toString();t.has(e)||(t.add(e),r.push(s))}const s=this._compile();this._partialSign(s,...r)}_partialSign(e,...t){const r=e.serialize();t.forEach((e=>{const t=sign(r,e.secretKey);this._addSignature(e.publicKey,toBuffer(t))}))}addSignature(e,t){this._compile(),this._addSignature(e,t)}_addSignature(e,t){assert(64===t.length);const r=this.signatures.findIndex((t=>e.equals(t.publicKey)));if(r<0)throw new Error(`unknown signer: ${e.toString()}`);this.signatures[r].signature=buffer.Buffer.from(t)}verifySignatures(e=!0){return!this._getMessageSignednessErrors(this.serializeMessage(),e)}_getMessageSignednessErrors(e,t){const r={};for(const{signature:s,publicKey:n}of this.signatures)null===s?t&&(r.missing||=[]).push(n):verify(s,e,n.toBytes())||(r.invalid||=[]).push(n);return r.invalid||r.missing?r:void 0}serialize(e){const{requireAllSignatures:t,verifySignatures:r}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},e),s=this.serializeMessage();if(r){const e=this._getMessageSignednessErrors(s,t);if(e){let t="Signature verification failed.";throw e.invalid&&(t+=`\nInvalid signature for public key${1===e.invalid.length?"":"(s)"} [\`${e.invalid.map((e=>e.toBase58())).join("`, `")}\`].`),e.missing&&(t+=`\nMissing signature for public key${1===e.missing.length?"":"(s)"} [\`${e.missing.map((e=>e.toBase58())).join("`, `")}\`].`),new Error(t)}}return this._serialize(s)}_serialize(e){const{signatures:t}=this,r=[];encodeLength(r,t.length);const s=r.length+64*t.length+e.length,n=buffer.Buffer.alloc(s);return assert(t.length<256),buffer.Buffer.from(r).copy(n,0),t.forEach((({signature:e},t)=>{null!==e&&(assert(64===e.length,"signature has invalid length"),buffer.Buffer.from(e).copy(n,r.length+64*t))})),e.copy(n,r.length+64*t.length),assert(n.length<=1232,`Transaction too large: ${n.length} > 1232`),n}get keys(){return assert(1===this.instructions.length),this.instructions[0].keys.map((e=>e.pubkey))}get programId(){return assert(1===this.instructions.length),this.instructions[0].programId}get data(){return assert(1===this.instructions.length),this.instructions[0].data}static from(e){let t=[...e];const r=decodeLength(t);let s=[];for(let e=0;e<r;e++){const e=guardedSplice(t,0,64);s.push(bs58__default.default.encode(buffer.Buffer.from(e)))}return Transaction.populate(Message.from(t),s)}static populate(e,t=[]){const r=new Transaction;return r.recentBlockhash=e.recentBlockhash,e.header.numRequiredSignatures>0&&(r.feePayer=e.accountKeys[0]),t.forEach(((t,s)=>{const n={signature:t==bs58__default.default.encode(DEFAULT_SIGNATURE)?null:bs58__default.default.decode(t),publicKey:e.accountKeys[s]};r.signatures.push(n)})),e.instructions.forEach((t=>{const s=t.accounts.map((t=>{const s=e.accountKeys[t];return{pubkey:s,isSigner:r.signatures.some((e=>e.publicKey.toString()===s.toString()))||e.isAccountSigner(t),isWritable:e.isAccountWritable(t)}}));r.instructions.push(new TransactionInstruction({keys:s,programId:e.accountKeys[t.programIdIndex],data:bs58__default.default.decode(t.data)}))})),r._message=e,r._json=r.toJSON(),r}}class TransactionMessage{constructor(e){this.payerKey=void 0,this.instructions=void 0,this.recentBlockhash=void 0,this.payerKey=e.payerKey,this.instructions=e.instructions,this.recentBlockhash=e.recentBlockhash}static decompile(e,t){const{header:r,compiledInstructions:s,recentBlockhash:n}=e,{numRequiredSignatures:o,numReadonlySignedAccounts:a,numReadonlyUnsignedAccounts:i}=r,u=o-a;assert(u>0,"Message header is invalid");const c=e.staticAccountKeys.length-o-i;assert(c>=0,"Message header is invalid");const l=e.getAccountKeys(t),p=l.get(0);if(void 0===p)throw new Error("Failed to decompile message because no account keys were found");const d=[];for(const e of s){const t=[];for(const s of e.accountKeyIndexes){const e=l.get(s);if(void 0===e)throw new Error(`Failed to find key for account key index ${s}`);let n;n=s<o?s<u:s<l.staticAccountKeys.length?s-o<c:s-l.staticAccountKeys.length<l.accountKeysFromLookups.writable.length,t.push({pubkey:e,isSigner:s<r.numRequiredSignatures,isWritable:n})}const s=l.get(e.programIdIndex);if(void 0===s)throw new Error(`Failed to find program id for program id index ${e.programIdIndex}`);d.push(new TransactionInstruction({programId:s,data:toBuffer(e.data),keys:t}))}return new TransactionMessage({payerKey:p,instructions:d,recentBlockhash:n})}compileToLegacyMessage(){return Message.compile({payerKey:this.payerKey,recentBlockhash:this.recentBlockhash,instructions:this.instructions})}compileToV0Message(e){return MessageV0.compile({payerKey:this.payerKey,recentBlockhash:this.recentBlockhash,instructions:this.instructions,addressLookupTableAccounts:e})}}class VersionedTransaction{get version(){return this.message.version}constructor(e,t){if(this.signatures=void 0,this.message=void 0,void 0!==t)assert(t.length===e.header.numRequiredSignatures,"Expected signatures length to be equal to the number of required signatures"),this.signatures=t;else{const t=[];for(let r=0;r<e.header.numRequiredSignatures;r++)t.push(new Uint8Array(64));this.signatures=t}this.message=e}serialize(){const e=this.message.serialize(),t=Array();encodeLength(t,this.signatures.length);const r=BufferLayout__namespace.struct([BufferLayout__namespace.blob(t.length,"encodedSignaturesLength"),BufferLayout__namespace.seq(signature(),this.signatures.length,"signatures"),BufferLayout__namespace.blob(e.length,"serializedMessage")]),s=new Uint8Array(2048),n=r.encode({encodedSignaturesLength:new Uint8Array(t),signatures:this.signatures,serializedMessage:e},s);return s.slice(0,n)}static deserialize(e){let t=[...e];const r=[],s=decodeLength(t);for(let e=0;e<s;e++)r.push(new Uint8Array(guardedSplice(t,0,64)));const n=VersionedMessage.deserialize(new Uint8Array(t));return new VersionedTransaction(n,r)}sign(e){const t=this.message.serialize(),r=this.message.staticAccountKeys.slice(0,this.message.header.numRequiredSignatures);for(const s of e){const e=r.findIndex((e=>e.equals(s.publicKey)));assert(e>=0,`Cannot sign with non signer key ${s.publicKey.toBase58()}`),this.signatures[e]=sign(t,s.secretKey)}}addSignature(e,t){assert(64===t.byteLength,"Signature must be 64 bytes long");const r=this.message.staticAccountKeys.slice(0,this.message.header.numRequiredSignatures).findIndex((t=>t.equals(e)));assert(r>=0,`Can not add signature; \`${e.toBase58()}\` is not required to sign this transaction`),this.signatures[r]=t}}const NUM_TICKS_PER_SECOND=160,DEFAULT_TICKS_PER_SLOT=64,NUM_SLOTS_PER_SECOND=2.5,MS_PER_SLOT=400,SYSVAR_CLOCK_PUBKEY=new PublicKey("SysvarC1ock11111111111111111111111111111111"),SYSVAR_EPOCH_SCHEDULE_PUBKEY=new PublicKey("SysvarEpochSchedu1e111111111111111111111111"),SYSVAR_INSTRUCTIONS_PUBKEY=new PublicKey("Sysvar1nstructions1111111111111111111111111"),SYSVAR_RECENT_BLOCKHASHES_PUBKEY=new PublicKey("SysvarRecentB1ockHashes11111111111111111111"),SYSVAR_RENT_PUBKEY=new PublicKey("SysvarRent111111111111111111111111111111111"),SYSVAR_REWARDS_PUBKEY=new PublicKey("SysvarRewards111111111111111111111111111111"),SYSVAR_SLOT_HASHES_PUBKEY=new PublicKey("SysvarS1otHashes111111111111111111111111111"),SYSVAR_SLOT_HISTORY_PUBKEY=new PublicKey("SysvarS1otHistory11111111111111111111111111"),SYSVAR_STAKE_HISTORY_PUBKEY=new PublicKey("SysvarStakeHistory1111111111111111111111111");class SendTransactionError extends Error{constructor({action:e,signature:t,transactionMessage:r,logs:s}){const n=s?`Logs: \n${JSON.stringify(s.slice(-10),null,2)}. `:"",o="\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.";let a;switch(e){case"send":a=`Transaction ${t} resulted in an error. \n${r}. `+n+o;break;case"simulate":a=`Simulation failed. \nMessage: ${r}. \n`+n+o;break;default:a=`Unknown action '${e}'`}super(a),this.signature=void 0,this.transactionMessage=void 0,this.transactionLogs=void 0,this.signature=t,this.transactionMessage=r,this.transactionLogs=s||void 0}get transactionError(){return{message:this.transactionMessage,logs:Array.isArray(this.transactionLogs)?this.transactionLogs:void 0}}get logs(){const e=this.transactionLogs;if(null==e||"object"!=typeof e||!("then"in e))return e}async getLogs(e){return Array.isArray(this.transactionLogs)||(this.transactionLogs=new Promise(((t,r)=>{e.getTransaction(this.signature).then((e=>{if(e&&e.meta&&e.meta.logMessages){const r=e.meta.logMessages;this.transactionLogs=r,t(r)}else r(new Error("Log messages not found"))})).catch(r)}))),await this.transactionLogs}}const SolanaJSONRPCErrorCode={JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP:-32001,JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE:-32002,JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE:-32003,JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE:-32004,JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY:-32005,JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:-32006,JSON_RPC_SERVER_ERROR_SLOT_SKIPPED:-32007,JSON_RPC_SERVER_ERROR_NO_SNAPSHOT:-32008,JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:-32009,JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:-32010,JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE:-32011,JSON_RPC_SCAN_ERROR:-32012,JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH:-32013,JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:-32014,JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:-32015,JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED:-32016};class SolanaJSONRPCError extends Error{constructor({code:e,message:t,data:r},s){super(null!=s?`${s}: ${t}`:t),this.code=void 0,this.data=void 0,this.code=e,this.data=r,this.name="SolanaJSONRPCError"}}async function sendAndConfirmTransaction(e,t,r,s){const n=s&&{skipPreflight:s.skipPreflight,preflightCommitment:s.preflightCommitment||s.commitment,maxRetries:s.maxRetries,minContextSlot:s.minContextSlot},o=await e.sendTransaction(t,r,n);let a;if(null!=t.recentBlockhash&&null!=t.lastValidBlockHeight)a=(await e.confirmTransaction({abortSignal:s?.abortSignal,signature:o,blockhash:t.recentBlockhash,lastValidBlockHeight:t.lastValidBlockHeight},s&&s.commitment)).value;else if(null!=t.minNonceContextSlot&&null!=t.nonceInfo){const{nonceInstruction:r}=t.nonceInfo,n=r.keys[0].pubkey;a=(await e.confirmTransaction({abortSignal:s?.abortSignal,minContextSlot:t.minNonceContextSlot,nonceAccountPubkey:n,nonceValue:t.nonceInfo.nonce,signature:o},s&&s.commitment)).value}else null!=s?.abortSignal&&console.warn("sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` or a combination of `nonceInfo` and `minNonceContextSlot` are abortable."),a=(await e.confirmTransaction(o,s&&s.commitment)).value;if(a.err){if(null!=o)throw new SendTransactionError({action:"send",signature:o,transactionMessage:`Status: (${JSON.stringify(a)})`});throw new Error(`Transaction ${o} failed (${JSON.stringify(a)})`)}return o}function sleep(e){return new Promise((t=>setTimeout(t,e)))}function encodeData(e,t){const r=e.layout.span>=0?e.layout.span:getAlloc(e,t),s=buffer.Buffer.alloc(r),n=Object.assign({instruction:e.index},t);return e.layout.encode(n,s),s}function decodeData$1(e,t){let r;try{r=e.layout.decode(t)}catch(e){throw new Error("invalid instruction; "+e)}if(r.instruction!==e.index)throw new Error(`invalid instruction; instruction index mismatch ${r.instruction} != ${e.index}`);return r}const FeeCalculatorLayout=BufferLayout__namespace.nu64("lamportsPerSignature"),NonceAccountLayout=BufferLayout__namespace.struct([BufferLayout__namespace.u32("version"),BufferLayout__namespace.u32("state"),publicKey("authorizedPubkey"),publicKey("nonce"),BufferLayout__namespace.struct([FeeCalculatorLayout],"feeCalculator")]),NONCE_ACCOUNT_LENGTH=NonceAccountLayout.span;class NonceAccount{constructor(e){this.authorizedPubkey=void 0,this.nonce=void 0,this.feeCalculator=void 0,this.authorizedPubkey=e.authorizedPubkey,this.nonce=e.nonce,this.feeCalculator=e.feeCalculator}static fromAccountData(e){const t=NonceAccountLayout.decode(toBuffer(e),0);return new NonceAccount({authorizedPubkey:new PublicKey(t.authorizedPubkey),nonce:new PublicKey(t.nonce).toString(),feeCalculator:t.feeCalculator})}}const encodeDecode=e=>({decode:e.decode.bind(e),encode:e.encode.bind(e)}),bigInt=e=>t=>{const r=BufferLayout.blob(e,t),{encode:s,decode:n}=encodeDecode(r),o=r;return o.decode=(e,t)=>{const r=n(e,t);return bigintBuffer.toBigIntLE(buffer.Buffer.from(r))},o.encode=(t,r,n)=>{const o=bigintBuffer.toBufferLE(t,e);return s(o,r,n)},o},u64=bigInt(8);class SystemInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=BufferLayout__namespace.u32("instruction").decode(e.data);let r;for(const[e,s]of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS))if(s.index==t){r=e;break}if(!r)throw new Error("Instruction type incorrect; not a SystemInstruction");return r}static decodeCreateAccount(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{lamports:t,space:r,programId:s}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create,e.data);return{fromPubkey:e.keys[0].pubkey,newAccountPubkey:e.keys[1].pubkey,lamports:t,space:r,programId:new PublicKey(s)}}static decodeTransfer(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{lamports:t}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer,e.data);return{fromPubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,lamports:t}}static decodeTransferWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{lamports:t,seed:r,programId:s}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,e.data);return{fromPubkey:e.keys[0].pubkey,basePubkey:e.keys[1].pubkey,toPubkey:e.keys[2].pubkey,lamports:t,seed:r,programId:new PublicKey(s)}}static decodeAllocate(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{space:t}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate,e.data);return{accountPubkey:e.keys[0].pubkey,space:t}}static decodeAllocateWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{base:t,seed:r,space:s,programId:n}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,e.data);return{accountPubkey:e.keys[0].pubkey,basePubkey:new PublicKey(t),seed:r,space:s,programId:new PublicKey(n)}}static decodeAssign(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{programId:t}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign,e.data);return{accountPubkey:e.keys[0].pubkey,programId:new PublicKey(t)}}static decodeAssignWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{base:t,seed:r,programId:s}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,e.data);return{accountPubkey:e.keys[0].pubkey,basePubkey:new PublicKey(t),seed:r,programId:new PublicKey(s)}}static decodeCreateWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{base:t,seed:r,lamports:s,space:n,programId:o}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,e.data);return{fromPubkey:e.keys[0].pubkey,newAccountPubkey:e.keys[1].pubkey,basePubkey:new PublicKey(t),seed:r,lamports:s,space:n,programId:new PublicKey(o)}}static decodeNonceInitialize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{authorized:t}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,authorizedPubkey:new PublicKey(t)}}static decodeNonceAdvance(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,e.data),{noncePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey}}static decodeNonceWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,5);const{lamports:t}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey,lamports:t}}static decodeNonceAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{authorized:t}=decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[1].pubkey,newAuthorizedPubkey:new PublicKey(t)}}static checkProgramId(e){if(!e.equals(SystemProgram.programId))throw new Error("invalid instruction; programId is not SystemProgram")}static checkKeyLength(e,t){if(e.length<t)throw new Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}}const SYSTEM_INSTRUCTION_LAYOUTS=Object.freeze({Create:{index:0,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.ns64("lamports"),BufferLayout__namespace.ns64("space"),publicKey("programId")])},Assign:{index:1,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("programId")])},Transfer:{index:2,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),u64("lamports")])},CreateWithSeed:{index:3,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("base"),rustString("seed"),BufferLayout__namespace.ns64("lamports"),BufferLayout__namespace.ns64("space"),publicKey("programId")])},AdvanceNonceAccount:{index:4,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},WithdrawNonceAccount:{index:5,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.ns64("lamports")])},InitializeNonceAccount:{index:6,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("authorized")])},AuthorizeNonceAccount:{index:7,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("authorized")])},Allocate:{index:8,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.ns64("space")])},AllocateWithSeed:{index:9,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("base"),rustString("seed"),BufferLayout__namespace.ns64("space"),publicKey("programId")])},AssignWithSeed:{index:10,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("base"),rustString("seed"),publicKey("programId")])},TransferWithSeed:{index:11,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),u64("lamports"),rustString("seed"),publicKey("programId")])},UpgradeNonceAccount:{index:12,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])}});class SystemProgram{constructor(){}static createAccount(e){const t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create,{lamports:e.lamports,space:e.space,programId:toBuffer(e.programId.toBuffer())});return new TransactionInstruction({keys:[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data:t})}static transfer(e){let t,r;if("basePubkey"in e){t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,{lamports:BigInt(e.lamports),seed:e.seed,programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}else{t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer,{lamports:BigInt(e.lamports)}),r=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}static assign(e){let t,r;if("basePubkey"in e){t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,{base:toBuffer(e.basePubkey.toBuffer()),seed:e.seed,programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign,{programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}static createAccountWithSeed(e){const t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,{base:toBuffer(e.basePubkey.toBuffer()),seed:e.seed,lamports:e.lamports,space:e.space,programId:toBuffer(e.programId.toBuffer())});let r=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!1,isWritable:!0}];return e.basePubkey.equals(e.fromPubkey)||r.push({pubkey:e.basePubkey,isSigner:!0,isWritable:!1}),new TransactionInstruction({keys:r,programId:this.programId,data:t})}static createNonceAccount(e){const t=new Transaction;"basePubkey"in e&&"seed"in e?t.add(SystemProgram.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:NONCE_ACCOUNT_LENGTH,programId:this.programId})):t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,lamports:e.lamports,space:NONCE_ACCOUNT_LENGTH,programId:this.programId}));const r={noncePubkey:e.noncePubkey,authorizedPubkey:e.authorizedPubkey};return t.add(this.nonceInitialize(r)),t}static nonceInitialize(e){const t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,{authorized:toBuffer(e.authorizedPubkey.toBuffer())}),r={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RECENT_BLOCKHASHES_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1}],programId:this.programId,data:t};return new TransactionInstruction(r)}static nonceAdvance(e){const t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount),r={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RECENT_BLOCKHASHES_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:t};return new TransactionInstruction(r)}static nonceWithdraw(e){const t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,{lamports:e.lamports});return new TransactionInstruction({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RECENT_BLOCKHASHES_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:t})}static nonceAuthorize(e){const t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,{authorized:toBuffer(e.newAuthorizedPubkey.toBuffer())});return new TransactionInstruction({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:t})}static allocate(e){let t,r;if("basePubkey"in e){t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,{base:toBuffer(e.basePubkey.toBuffer()),seed:e.seed,space:e.space,programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{t=encodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate,{space:e.space}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}}SystemProgram.programId=new PublicKey("11111111111111111111111111111111");const CHUNK_SIZE=932;class Loader{constructor(){}static getMinNumSignatures(e){return 2*(Math.ceil(e/Loader.chunkSize)+1+1)}static async load(e,t,r,s,n){{const o=await e.getMinimumBalanceForRentExemption(n.length),a=await e.getAccountInfo(r.publicKey,"confirmed");let i=null;if(null!==a){if(a.executable)return console.error("Program load failed, account is already executable"),!1;a.data.length!==n.length&&(i=i||new Transaction,i.add(SystemProgram.allocate({accountPubkey:r.publicKey,space:n.length}))),a.owner.equals(s)||(i=i||new Transaction,i.add(SystemProgram.assign({accountPubkey:r.publicKey,programId:s}))),a.lamports<o&&(i=i||new Transaction,i.add(SystemProgram.transfer({fromPubkey:t.publicKey,toPubkey:r.publicKey,lamports:o-a.lamports})))}else i=(new Transaction).add(SystemProgram.createAccount({fromPubkey:t.publicKey,newAccountPubkey:r.publicKey,lamports:o>0?o:1,space:n.length,programId:s}));null!==i&&await sendAndConfirmTransaction(e,i,[t,r],{commitment:"confirmed"})}const o=BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.u32("offset"),BufferLayout__namespace.u32("bytesLength"),BufferLayout__namespace.u32("bytesLengthPadding"),BufferLayout__namespace.seq(BufferLayout__namespace.u8("byte"),BufferLayout__namespace.offset(BufferLayout__namespace.u32(),-8),"bytes")]),a=Loader.chunkSize;let i=0,u=n,c=[];for(;u.length>0;){const n=u.slice(0,a),l=buffer.Buffer.alloc(a+16);o.encode({instruction:0,offset:i,bytes:n,bytesLength:0,bytesLengthPadding:0},l);const p=(new Transaction).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0}],programId:s,data:l});if(c.push(sendAndConfirmTransaction(e,p,[t,r],{commitment:"confirmed"})),e._rpcEndpoint.includes("solana.com")){const e=4;await sleep(1e3/e)}i+=a,u=u.slice(a)}await Promise.all(c);{const n=BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")]),o=buffer.Buffer.alloc(n.span);n.encode({instruction:1},o);const a=(new Transaction).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1}],programId:s,data:o}),i="processed",u=await e.sendTransaction(a,[t,r],{preflightCommitment:i}),{context:c,value:l}=await e.confirmTransaction({signature:u,lastValidBlockHeight:a.lastValidBlockHeight,blockhash:a.recentBlockhash},i);if(l.err)throw new Error(`Transaction ${u} failed (${JSON.stringify(l)})`);for(;;){try{if(await e.getSlot({commitment:i})>c.slot)break}catch{}await new Promise((e=>setTimeout(e,Math.round(200))))}}return!0}}Loader.chunkSize=932;const BPF_LOADER_PROGRAM_ID=new PublicKey("BPFLoader2111111111111111111111111111111111");class BpfLoader{static getMinNumSignatures(e){return Loader.getMinNumSignatures(e)}static load(e,t,r,s,n){return Loader.load(e,t,r,n,s)}}function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var fastStableStringify$1,hasRequiredFastStableStringify;function requireFastStableStringify(){if(hasRequiredFastStableStringify)return fastStableStringify$1;hasRequiredFastStableStringify=1;var e=Object.prototype.toString,t=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};function r(s,n){var o,a,i,u,c,l,p;if(!0===s)return"true";if(!1===s)return"false";switch(typeof s){case"object":if(null===s)return null;if(s.toJSON&&"function"==typeof s.toJSON)return r(s.toJSON(),n);if("[object Array]"===(p=e.call(s))){for(i="[",a=s.length-1,o=0;o<a;o++)i+=r(s[o],!0)+",";return a>-1&&(i+=r(s[o],!0)),i+"]"}if("[object Object]"===p){for(a=(u=t(s).sort()).length,i="",o=0;o<a;)void 0!==(l=r(s[c=u[o]],!1))&&(i&&(i+=","),i+=JSON.stringify(c)+":"+l),o++;return"{"+i+"}"}return JSON.stringify(s);case"function":case"undefined":return n?null:void 0;case"string":return JSON.stringify(s);default:return isFinite(s)?s:null}}return fastStableStringify$1=function(e){var t=r(e,!1);if(void 0!==t)return""+t}}var fastStableStringifyExports=requireFastStableStringify(),fastStableStringify=getDefaultExportFromCjs(fastStableStringifyExports);const MINIMUM_SLOT_PER_EPOCH=32;function trailingZeros(e){let t=0;for(;e>1;)e/=2,t++;return t}function nextPowerOfTwo(e){return 0===e?1:(e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,(e|=e>>32)+1)}class EpochSchedule{constructor(e,t,r,s,n){this.slotsPerEpoch=void 0,this.leaderScheduleSlotOffset=void 0,this.warmup=void 0,this.firstNormalEpoch=void 0,this.firstNormalSlot=void 0,this.slotsPerEpoch=e,this.leaderScheduleSlotOffset=t,this.warmup=r,this.firstNormalEpoch=s,this.firstNormalSlot=n}getEpoch(e){return this.getEpochAndSlotIndex(e)[0]}getEpochAndSlotIndex(e){if(e<this.firstNormalSlot){const t=trailingZeros(nextPowerOfTwo(e+32+1))-trailingZeros(32)-1;return[t,e-(this.getSlotsInEpoch(t)-32)]}{const t=e-this.firstNormalSlot,r=Math.floor(t/this.slotsPerEpoch);return[this.firstNormalEpoch+r,t%this.slotsPerEpoch]}}getFirstSlotInEpoch(e){return e<=this.firstNormalEpoch?32*(Math.pow(2,e)-1):(e-this.firstNormalEpoch)*this.slotsPerEpoch+this.firstNormalSlot}getLastSlotInEpoch(e){return this.getFirstSlotInEpoch(e)+this.getSlotsInEpoch(e)-1}getSlotsInEpoch(e){return e<this.firstNormalEpoch?Math.pow(2,e+trailingZeros(32)):this.slotsPerEpoch}}var fetchImpl=globalThis.fetch;class RpcWebSocketClient extends rpcWebsockets.CommonClient{constructor(e,t,r){super((e=>{const r=rpcWebsockets.WebSocket(e,{autoconnect:!0,max_reconnects:5,reconnect:!0,reconnect_interval:1e3,...t});return this.underlyingSocket="socket"in r?r.socket:r,r}),e,t,r),this.underlyingSocket=void 0}call(...e){const t=this.underlyingSocket?.readyState;return 1===t?super.call(...e):Promise.reject(new Error("Tried to call a JSON-RPC method `"+e[0]+"` but the socket was not `CONNECTING` or `OPEN` (`readyState` was "+t+")"))}notify(...e){const t=this.underlyingSocket?.readyState;return 1===t?super.notify(...e):Promise.reject(new Error("Tried to send a JSON-RPC notification `"+e[0]+"` but the socket was not `CONNECTING` or `OPEN` (`readyState` was "+t+")"))}}function decodeData(e,t){let r;try{r=e.layout.decode(t)}catch(e){throw new Error("invalid instruction; "+e)}if(r.typeIndex!==e.index)throw new Error(`invalid account data; account type mismatch ${r.typeIndex} != ${e.index}`);return r}const LOOKUP_TABLE_META_SIZE=56;class AddressLookupTableAccount{constructor(e){this.key=void 0,this.state=void 0,this.key=e.key,this.state=e.state}isActive(){const e=BigInt("0xffffffffffffffff");return this.state.deactivationSlot===e}static deserialize(e){const t=decodeData(LookupTableMetaLayout,e),r=e.length-56;assert(r>=0,"lookup table is invalid"),assert(r%32==0,"lookup table is invalid");const s=r/32,{addresses:n}=BufferLayout__namespace.struct([BufferLayout__namespace.seq(publicKey(),s,"addresses")]).decode(e.slice(56));return{deactivationSlot:t.deactivationSlot,lastExtendedSlot:t.lastExtendedSlot,lastExtendedSlotStartIndex:t.lastExtendedStartIndex,authority:0!==t.authority.length?new PublicKey(t.authority[0]):void 0,addresses:n.map((e=>new PublicKey(e)))}}}const LookupTableMetaLayout={index:1,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("typeIndex"),u64("deactivationSlot"),BufferLayout__namespace.nu64("lastExtendedSlot"),BufferLayout__namespace.u8("lastExtendedStartIndex"),BufferLayout__namespace.u8(),BufferLayout__namespace.seq(publicKey(),BufferLayout__namespace.offset(BufferLayout__namespace.u8(),-1),"authority")])},URL_RE=/^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i;function makeWebsocketUrl(e){const t=e.match(URL_RE);if(null==t)throw TypeError(`Failed to validate endpoint URL \`${e}\``);const[r,s,n,o]=t,a=e.startsWith("https:")?"wss:":"ws:",i=null==n?null:parseInt(n.slice(1),10);return`${a}//${s}${null==i?"":`:${i+1}`}${o}`}const PublicKeyFromString=superstruct.coerce(superstruct.instance(PublicKey),superstruct.string(),(e=>new PublicKey(e))),RawAccountDataResult=superstruct.tuple([superstruct.string(),superstruct.literal("base64")]),BufferFromRawAccountData=superstruct.coerce(superstruct.instance(buffer.Buffer),RawAccountDataResult,(e=>buffer.Buffer.from(e[0],"base64"))),BLOCKHASH_CACHE_TIMEOUT_MS=3e4;function assertEndpointUrl(e){if(!1===/^https?:/.test(e))throw new TypeError("Endpoint URL must start with `http:` or `https:`.");return e}function extractCommitmentFromConfig(e){let t,r;if("string"==typeof e)t=e;else if(e){const{commitment:s,...n}=e;t=s,r=n}return{commitment:t,config:r}}function applyDefaultMemcmpEncodingToFilters(e){return e.map((e=>"memcmp"in e?{...e,memcmp:{...e.memcmp,encoding:e.memcmp.encoding??"base58"}}:e))}function createRpcResult(e){return superstruct.union([superstruct.type({jsonrpc:superstruct.literal("2.0"),id:superstruct.string(),result:e}),superstruct.type({jsonrpc:superstruct.literal("2.0"),id:superstruct.string(),error:superstruct.type({code:superstruct.unknown(),message:superstruct.string(),data:superstruct.optional(superstruct.any())})})])}const UnknownRpcResult=createRpcResult(superstruct.unknown());function jsonRpcResult(e){return superstruct.coerce(createRpcResult(e),UnknownRpcResult,(t=>"error"in t?t:{...t,result:superstruct.create(t.result,e)}))}function jsonRpcResultAndContext(e){return jsonRpcResult(superstruct.type({context:superstruct.type({slot:superstruct.number()}),value:e}))}function notificationResultAndContext(e){return superstruct.type({context:superstruct.type({slot:superstruct.number()}),value:e})}function versionedMessageFromResponse(e,t){return 0===e?new MessageV0({header:t.header,staticAccountKeys:t.accountKeys.map((e=>new PublicKey(e))),recentBlockhash:t.recentBlockhash,compiledInstructions:t.instructions.map((e=>({programIdIndex:e.programIdIndex,accountKeyIndexes:e.accounts,data:bs58__default.default.decode(e.data)}))),addressTableLookups:t.addressTableLookups}):new Message(t)}const GetInflationGovernorResult=superstruct.type({foundation:superstruct.number(),foundationTerm:superstruct.number(),initial:superstruct.number(),taper:superstruct.number(),terminal:superstruct.number()}),GetInflationRewardResult=jsonRpcResult(superstruct.array(superstruct.nullable(superstruct.type({epoch:superstruct.number(),effectiveSlot:superstruct.number(),amount:superstruct.number(),postBalance:superstruct.number(),commission:superstruct.optional(superstruct.nullable(superstruct.number()))})))),GetRecentPrioritizationFeesResult=superstruct.array(superstruct.type({slot:superstruct.number(),prioritizationFee:superstruct.number()})),GetInflationRateResult=superstruct.type({total:superstruct.number(),validator:superstruct.number(),foundation:superstruct.number(),epoch:superstruct.number()}),GetEpochInfoResult=superstruct.type({epoch:superstruct.number(),slotIndex:superstruct.number(),slotsInEpoch:superstruct.number(),absoluteSlot:superstruct.number(),blockHeight:superstruct.optional(superstruct.number()),transactionCount:superstruct.optional(superstruct.number())}),GetEpochScheduleResult=superstruct.type({slotsPerEpoch:superstruct.number(),leaderScheduleSlotOffset:superstruct.number(),warmup:superstruct.boolean(),firstNormalEpoch:superstruct.number(),firstNormalSlot:superstruct.number()}),GetLeaderScheduleResult=superstruct.record(superstruct.string(),superstruct.array(superstruct.number())),TransactionErrorResult=superstruct.nullable(superstruct.union([superstruct.type({}),superstruct.string()])),SignatureStatusResult=superstruct.type({err:TransactionErrorResult}),SignatureReceivedResult=superstruct.literal("receivedSignature"),VersionResult=superstruct.type({"solana-core":superstruct.string(),"feature-set":superstruct.optional(superstruct.number())}),ParsedInstructionStruct=superstruct.type({program:superstruct.string(),programId:PublicKeyFromString,parsed:superstruct.unknown()}),PartiallyDecodedInstructionStruct=superstruct.type({programId:PublicKeyFromString,accounts:superstruct.array(PublicKeyFromString),data:superstruct.string()}),SimulatedTransactionResponseStruct=jsonRpcResultAndContext(superstruct.type({err:superstruct.nullable(superstruct.union([superstruct.type({}),superstruct.string()])),logs:superstruct.nullable(superstruct.array(superstruct.string())),accounts:superstruct.optional(superstruct.nullable(superstruct.array(superstruct.nullable(superstruct.type({executable:superstruct.boolean(),owner:superstruct.string(),lamports:superstruct.number(),data:superstruct.array(superstruct.string()),rentEpoch:superstruct.optional(superstruct.number())}))))),unitsConsumed:superstruct.optional(superstruct.number()),returnData:superstruct.optional(superstruct.nullable(superstruct.type({programId:superstruct.string(),data:superstruct.tuple([superstruct.string(),superstruct.literal("base64")])}))),innerInstructions:superstruct.optional(superstruct.nullable(superstruct.array(superstruct.type({index:superstruct.number(),instructions:superstruct.array(superstruct.union([ParsedInstructionStruct,PartiallyDecodedInstructionStruct]))}))))})),BlockProductionResponseStruct=jsonRpcResultAndContext(superstruct.type({byIdentity:superstruct.record(superstruct.string(),superstruct.array(superstruct.number())),range:superstruct.type({firstSlot:superstruct.number(),lastSlot:superstruct.number()})}));function createRpcClient(e,t,r,s,n,o){const a=r||fetchImpl;let i;null!=o&&console.warn("You have supplied an `httpAgent` when creating a `Connection` in a browser environment.It has been ignored; `httpAgent` is only used in Node environments."),s&&(i=async(e,t)=>{const r=await new Promise(((r,n)=>{try{s(e,t,((e,t)=>r([e,t])))}catch(e){n(e)}}));return await a(...r)});return new RpcClient__default.default((async(r,s)=>{const o={method:"POST",body:r,agent:undefined,headers:Object.assign({"Content-Type":"application/json"},t||{},COMMON_HTTP_HEADERS)};try{let t,r=5,u=500;for(;(t=i?await i(e,o):await a(e,o),429===t.status)&&!0!==n&&(r-=1,0!==r);)console.error(`Server responded with ${t.status} ${t.statusText}.  Retrying after ${u}ms delay...`),await sleep(u),u*=2;const c=await t.text();t.ok?s(null,c):s(new Error(`${t.status} ${t.statusText}: ${c}`))}catch(e){e instanceof Error&&s(e)}}),{})}function createRpcRequest(e){return(t,r)=>new Promise(((s,n)=>{e.request(t,r,((e,t)=>{e?n(e):s(t)}))}))}function createRpcBatchRequest(e){return t=>new Promise(((r,s)=>{0===t.length&&r([]);const n=t.map((t=>e.request(t.methodName,t.args)));e.request(n,((e,t)=>{e?s(e):r(t)}))}))}const GetInflationGovernorRpcResult=jsonRpcResult(GetInflationGovernorResult),GetInflationRateRpcResult=jsonRpcResult(GetInflationRateResult),GetRecentPrioritizationFeesRpcResult=jsonRpcResult(GetRecentPrioritizationFeesResult),GetEpochInfoRpcResult=jsonRpcResult(GetEpochInfoResult),GetEpochScheduleRpcResult=jsonRpcResult(GetEpochScheduleResult),GetLeaderScheduleRpcResult=jsonRpcResult(GetLeaderScheduleResult),SlotRpcResult=jsonRpcResult(superstruct.number()),GetSupplyRpcResult=jsonRpcResultAndContext(superstruct.type({total:superstruct.number(),circulating:superstruct.number(),nonCirculating:superstruct.number(),nonCirculatingAccounts:superstruct.array(PublicKeyFromString)})),TokenAmountResult=superstruct.type({amount:superstruct.string(),uiAmount:superstruct.nullable(superstruct.number()),decimals:superstruct.number(),uiAmountString:superstruct.optional(superstruct.string())}),GetTokenLargestAccountsResult=jsonRpcResultAndContext(superstruct.array(superstruct.type({address:PublicKeyFromString,amount:superstruct.string(),uiAmount:superstruct.nullable(superstruct.number()),decimals:superstruct.number(),uiAmountString:superstruct.optional(superstruct.string())}))),GetTokenAccountsByOwner=jsonRpcResultAndContext(superstruct.array(superstruct.type({pubkey:PublicKeyFromString,account:superstruct.type({executable:superstruct.boolean(),owner:PublicKeyFromString,lamports:superstruct.number(),data:BufferFromRawAccountData,rentEpoch:superstruct.number()})}))),ParsedAccountDataResult=superstruct.type({program:superstruct.string(),parsed:superstruct.unknown(),space:superstruct.number()}),GetParsedTokenAccountsByOwner=jsonRpcResultAndContext(superstruct.array(superstruct.type({pubkey:PublicKeyFromString,account:superstruct.type({executable:superstruct.boolean(),owner:PublicKeyFromString,lamports:superstruct.number(),data:ParsedAccountDataResult,rentEpoch:superstruct.number()})}))),GetLargestAccountsRpcResult=jsonRpcResultAndContext(superstruct.array(superstruct.type({lamports:superstruct.number(),address:PublicKeyFromString}))),AccountInfoResult=superstruct.type({executable:superstruct.boolean(),owner:PublicKeyFromString,lamports:superstruct.number(),data:BufferFromRawAccountData,rentEpoch:superstruct.number()}),KeyedAccountInfoResult=superstruct.type({pubkey:PublicKeyFromString,account:AccountInfoResult}),ParsedOrRawAccountData=superstruct.coerce(superstruct.union([superstruct.instance(buffer.Buffer),ParsedAccountDataResult]),superstruct.union([RawAccountDataResult,ParsedAccountDataResult]),(e=>Array.isArray(e)?superstruct.create(e,BufferFromRawAccountData):e)),ParsedAccountInfoResult=superstruct.type({executable:superstruct.boolean(),owner:PublicKeyFromString,lamports:superstruct.number(),data:ParsedOrRawAccountData,rentEpoch:superstruct.number()}),KeyedParsedAccountInfoResult=superstruct.type({pubkey:PublicKeyFromString,account:ParsedAccountInfoResult}),StakeActivationResult=superstruct.type({state:superstruct.union([superstruct.literal("active"),superstruct.literal("inactive"),superstruct.literal("activating"),superstruct.literal("deactivating")]),active:superstruct.number(),inactive:superstruct.number()}),GetConfirmedSignaturesForAddress2RpcResult=jsonRpcResult(superstruct.array(superstruct.type({signature:superstruct.string(),slot:superstruct.number(),err:TransactionErrorResult,memo:superstruct.nullable(superstruct.string()),blockTime:superstruct.optional(superstruct.nullable(superstruct.number()))}))),GetSignaturesForAddressRpcResult=jsonRpcResult(superstruct.array(superstruct.type({signature:superstruct.string(),slot:superstruct.number(),err:TransactionErrorResult,memo:superstruct.nullable(superstruct.string()),blockTime:superstruct.optional(superstruct.nullable(superstruct.number()))}))),AccountNotificationResult=superstruct.type({subscription:superstruct.number(),result:notificationResultAndContext(AccountInfoResult)}),ProgramAccountInfoResult=superstruct.type({pubkey:PublicKeyFromString,account:AccountInfoResult}),ProgramAccountNotificationResult=superstruct.type({subscription:superstruct.number(),result:notificationResultAndContext(ProgramAccountInfoResult)}),SlotInfoResult=superstruct.type({parent:superstruct.number(),slot:superstruct.number(),root:superstruct.number()}),SlotNotificationResult=superstruct.type({subscription:superstruct.number(),result:SlotInfoResult}),SlotUpdateResult=superstruct.union([superstruct.type({type:superstruct.union([superstruct.literal("firstShredReceived"),superstruct.literal("completed"),superstruct.literal("optimisticConfirmation"),superstruct.literal("root")]),slot:superstruct.number(),timestamp:superstruct.number()}),superstruct.type({type:superstruct.literal("createdBank"),parent:superstruct.number(),slot:superstruct.number(),timestamp:superstruct.number()}),superstruct.type({type:superstruct.literal("frozen"),slot:superstruct.number(),timestamp:superstruct.number(),stats:superstruct.type({numTransactionEntries:superstruct.number(),numSuccessfulTransactions:superstruct.number(),numFailedTransactions:superstruct.number(),maxTransactionsPerEntry:superstruct.number()})}),superstruct.type({type:superstruct.literal("dead"),slot:superstruct.number(),timestamp:superstruct.number(),err:superstruct.string()})]),SlotUpdateNotificationResult=superstruct.type({subscription:superstruct.number(),result:SlotUpdateResult}),SignatureNotificationResult=superstruct.type({subscription:superstruct.number(),result:notificationResultAndContext(superstruct.union([SignatureStatusResult,SignatureReceivedResult]))}),RootNotificationResult=superstruct.type({subscription:superstruct.number(),result:superstruct.number()}),ContactInfoResult=superstruct.type({pubkey:superstruct.string(),gossip:superstruct.nullable(superstruct.string()),tpu:superstruct.nullable(superstruct.string()),rpc:superstruct.nullable(superstruct.string()),version:superstruct.nullable(superstruct.string())}),VoteAccountInfoResult=superstruct.type({votePubkey:superstruct.string(),nodePubkey:superstruct.string(),activatedStake:superstruct.number(),epochVoteAccount:superstruct.boolean(),epochCredits:superstruct.array(superstruct.tuple([superstruct.number(),superstruct.number(),superstruct.number()])),commission:superstruct.number(),lastVote:superstruct.number(),rootSlot:superstruct.nullable(superstruct.number())}),GetVoteAccounts=jsonRpcResult(superstruct.type({current:superstruct.array(VoteAccountInfoResult),delinquent:superstruct.array(VoteAccountInfoResult)})),ConfirmationStatus=superstruct.union([superstruct.literal("processed"),superstruct.literal("confirmed"),superstruct.literal("finalized")]),SignatureStatusResponse=superstruct.type({slot:superstruct.number(),confirmations:superstruct.nullable(superstruct.number()),err:TransactionErrorResult,confirmationStatus:superstruct.optional(ConfirmationStatus)}),GetSignatureStatusesRpcResult=jsonRpcResultAndContext(superstruct.array(superstruct.nullable(SignatureStatusResponse))),GetMinimumBalanceForRentExemptionRpcResult=jsonRpcResult(superstruct.number()),AddressTableLookupStruct=superstruct.type({accountKey:PublicKeyFromString,writableIndexes:superstruct.array(superstruct.number()),readonlyIndexes:superstruct.array(superstruct.number())}),ConfirmedTransactionResult=superstruct.type({signatures:superstruct.array(superstruct.string()),message:superstruct.type({accountKeys:superstruct.array(superstruct.string()),header:superstruct.type({numRequiredSignatures:superstruct.number(),numReadonlySignedAccounts:superstruct.number(),numReadonlyUnsignedAccounts:superstruct.number()}),instructions:superstruct.array(superstruct.type({accounts:superstruct.array(superstruct.number()),data:superstruct.string(),programIdIndex:superstruct.number()})),recentBlockhash:superstruct.string(),addressTableLookups:superstruct.optional(superstruct.array(AddressTableLookupStruct))})}),AnnotatedAccountKey=superstruct.type({pubkey:PublicKeyFromString,signer:superstruct.boolean(),writable:superstruct.boolean(),source:superstruct.optional(superstruct.union([superstruct.literal("transaction"),superstruct.literal("lookupTable")]))}),ConfirmedTransactionAccountsModeResult=superstruct.type({accountKeys:superstruct.array(AnnotatedAccountKey),signatures:superstruct.array(superstruct.string())}),ParsedInstructionResult=superstruct.type({parsed:superstruct.unknown(),program:superstruct.string(),programId:PublicKeyFromString}),RawInstructionResult=superstruct.type({accounts:superstruct.array(PublicKeyFromString),data:superstruct.string(),programId:PublicKeyFromString}),InstructionResult=superstruct.union([RawInstructionResult,ParsedInstructionResult]),UnknownInstructionResult=superstruct.union([superstruct.type({parsed:superstruct.unknown(),program:superstruct.string(),programId:superstruct.string()}),superstruct.type({accounts:superstruct.array(superstruct.string()),data:superstruct.string(),programId:superstruct.string()})]),ParsedOrRawInstruction=superstruct.coerce(InstructionResult,UnknownInstructionResult,(e=>"accounts"in e?superstruct.create(e,RawInstructionResult):superstruct.create(e,ParsedInstructionResult))),ParsedConfirmedTransactionResult=superstruct.type({signatures:superstruct.array(superstruct.string()),message:superstruct.type({accountKeys:superstruct.array(AnnotatedAccountKey),instructions:superstruct.array(ParsedOrRawInstruction),recentBlockhash:superstruct.string(),addressTableLookups:superstruct.optional(superstruct.nullable(superstruct.array(AddressTableLookupStruct)))})}),TokenBalanceResult=superstruct.type({accountIndex:superstruct.number(),mint:superstruct.string(),owner:superstruct.optional(superstruct.string()),programId:superstruct.optional(superstruct.string()),uiTokenAmount:TokenAmountResult}),LoadedAddressesResult=superstruct.type({writable:superstruct.array(PublicKeyFromString),readonly:superstruct.array(PublicKeyFromString)}),ConfirmedTransactionMetaResult=superstruct.type({err:TransactionErrorResult,fee:superstruct.number(),innerInstructions:superstruct.optional(superstruct.nullable(superstruct.array(superstruct.type({index:superstruct.number(),instructions:superstruct.array(superstruct.type({accounts:superstruct.array(superstruct.number()),data:superstruct.string(),programIdIndex:superstruct.number()}))})))),preBalances:superstruct.array(superstruct.number()),postBalances:superstruct.array(superstruct.number()),logMessages:superstruct.optional(superstruct.nullable(superstruct.array(superstruct.string()))),preTokenBalances:superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),postTokenBalances:superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),loadedAddresses:superstruct.optional(LoadedAddressesResult),computeUnitsConsumed:superstruct.optional(superstruct.number())}),ParsedConfirmedTransactionMetaResult=superstruct.type({err:TransactionErrorResult,fee:superstruct.number(),innerInstructions:superstruct.optional(superstruct.nullable(superstruct.array(superstruct.type({index:superstruct.number(),instructions:superstruct.array(ParsedOrRawInstruction)})))),preBalances:superstruct.array(superstruct.number()),postBalances:superstruct.array(superstruct.number()),logMessages:superstruct.optional(superstruct.nullable(superstruct.array(superstruct.string()))),preTokenBalances:superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),postTokenBalances:superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),loadedAddresses:superstruct.optional(LoadedAddressesResult),computeUnitsConsumed:superstruct.optional(superstruct.number())}),TransactionVersionStruct=superstruct.union([superstruct.literal(0),superstruct.literal("legacy")]),RewardsResult=superstruct.type({pubkey:superstruct.string(),lamports:superstruct.number(),postBalance:superstruct.nullable(superstruct.number()),rewardType:superstruct.nullable(superstruct.string()),commission:superstruct.optional(superstruct.nullable(superstruct.number()))}),GetBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),transactions:superstruct.array(superstruct.type({transaction:ConfirmedTransactionResult,meta:superstruct.nullable(ConfirmedTransactionMetaResult),version:superstruct.optional(TransactionVersionStruct)})),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number()),blockHeight:superstruct.nullable(superstruct.number())}))),GetNoneModeBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number()),blockHeight:superstruct.nullable(superstruct.number())}))),GetAccountsModeBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),transactions:superstruct.array(superstruct.type({transaction:ConfirmedTransactionAccountsModeResult,meta:superstruct.nullable(ConfirmedTransactionMetaResult),version:superstruct.optional(TransactionVersionStruct)})),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number()),blockHeight:superstruct.nullable(superstruct.number())}))),GetParsedBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),transactions:superstruct.array(superstruct.type({transaction:ParsedConfirmedTransactionResult,meta:superstruct.nullable(ParsedConfirmedTransactionMetaResult),version:superstruct.optional(TransactionVersionStruct)})),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number()),blockHeight:superstruct.nullable(superstruct.number())}))),GetParsedAccountsModeBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),transactions:superstruct.array(superstruct.type({transaction:ConfirmedTransactionAccountsModeResult,meta:superstruct.nullable(ParsedConfirmedTransactionMetaResult),version:superstruct.optional(TransactionVersionStruct)})),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number()),blockHeight:superstruct.nullable(superstruct.number())}))),GetParsedNoneModeBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number()),blockHeight:superstruct.nullable(superstruct.number())}))),GetConfirmedBlockRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),transactions:superstruct.array(superstruct.type({transaction:ConfirmedTransactionResult,meta:superstruct.nullable(ConfirmedTransactionMetaResult)})),rewards:superstruct.optional(superstruct.array(RewardsResult)),blockTime:superstruct.nullable(superstruct.number())}))),GetBlockSignaturesRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({blockhash:superstruct.string(),previousBlockhash:superstruct.string(),parentSlot:superstruct.number(),signatures:superstruct.array(superstruct.string()),blockTime:superstruct.nullable(superstruct.number())}))),GetTransactionRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({slot:superstruct.number(),meta:superstruct.nullable(ConfirmedTransactionMetaResult),blockTime:superstruct.optional(superstruct.nullable(superstruct.number())),transaction:ConfirmedTransactionResult,version:superstruct.optional(TransactionVersionStruct)}))),GetParsedTransactionRpcResult=jsonRpcResult(superstruct.nullable(superstruct.type({slot:superstruct.number(),transaction:ParsedConfirmedTransactionResult,meta:superstruct.nullable(ParsedConfirmedTransactionMetaResult),blockTime:superstruct.optional(superstruct.nullable(superstruct.number())),version:superstruct.optional(TransactionVersionStruct)}))),GetLatestBlockhashRpcResult=jsonRpcResultAndContext(superstruct.type({blockhash:superstruct.string(),lastValidBlockHeight:superstruct.number()})),IsBlockhashValidRpcResult=jsonRpcResultAndContext(superstruct.boolean()),PerfSampleResult=superstruct.type({slot:superstruct.number(),numTransactions:superstruct.number(),numSlots:superstruct.number(),samplePeriodSecs:superstruct.number()}),GetRecentPerformanceSamplesRpcResult=jsonRpcResult(superstruct.array(PerfSampleResult)),GetFeeCalculatorRpcResult=jsonRpcResultAndContext(superstruct.nullable(superstruct.type({feeCalculator:superstruct.type({lamportsPerSignature:superstruct.number()})}))),RequestAirdropRpcResult=jsonRpcResult(superstruct.string()),SendTransactionRpcResult=jsonRpcResult(superstruct.string()),LogsResult=superstruct.type({err:TransactionErrorResult,logs:superstruct.array(superstruct.string()),signature:superstruct.string()}),LogsNotificationResult=superstruct.type({result:notificationResultAndContext(LogsResult),subscription:superstruct.number()}),COMMON_HTTP_HEADERS={"solana-client":"js/1.0.0-maintenance"};class Connection{constructor(e,t){let r,s,n,o,a,i;this._commitment=void 0,this._confirmTransactionInitialTimeout=void 0,this._rpcEndpoint=void 0,this._rpcWsEndpoint=void 0,this._rpcClient=void 0,this._rpcRequest=void 0,this._rpcBatchRequest=void 0,this._rpcWebSocket=void 0,this._rpcWebSocketConnected=!1,this._rpcWebSocketHeartbeat=null,this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketGeneration=0,this._disableBlockhashCaching=!1,this._pollingBlockhash=!1,this._blockhashInfo={latestBlockhash:null,lastFetch:0,transactionSignatures:[],simulatedSignatures:[]},this._nextClientSubscriptionId=0,this._subscriptionDisposeFunctionsByClientSubscriptionId={},this._subscriptionHashByClientSubscriptionId={},this._subscriptionStateChangeCallbacksByHash={},this._subscriptionCallbacksByServerSubscriptionId={},this._subscriptionsByHash={},this._subscriptionsAutoDisposedByRpc=new Set,this.getBlockHeight=(()=>{const e={};return async t=>{const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgs([],r,void 0,s),o=fastStableStringify(n);return e[o]=e[o]??(async()=>{try{const e=await this._rpcRequest("getBlockHeight",n),t=superstruct.create(e,jsonRpcResult(superstruct.number()));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get block height information");return t.result}finally{delete e[o]}})(),await e[o]}})(),t&&"string"==typeof t?this._commitment=t:t&&(this._commitment=t.commitment,this._confirmTransactionInitialTimeout=t.confirmTransactionInitialTimeout,r=t.wsEndpoint,s=t.httpHeaders,n=t.fetch,o=t.fetchMiddleware,a=t.disableRetryOnRateLimit,i=t.httpAgent),this._rpcEndpoint=assertEndpointUrl(e),this._rpcWsEndpoint=r||makeWebsocketUrl(e),this._rpcClient=createRpcClient(e,s,n,o,a,i),this._rpcRequest=createRpcRequest(this._rpcClient),this._rpcBatchRequest=createRpcBatchRequest(this._rpcClient),this._rpcWebSocket=new RpcWebSocketClient(this._rpcWsEndpoint,{autoconnect:!1,max_reconnects:1/0}),this._rpcWebSocket.on("open",this._wsOnOpen.bind(this)),this._rpcWebSocket.on("error",this._wsOnError.bind(this)),this._rpcWebSocket.on("close",this._wsOnClose.bind(this)),this._rpcWebSocket.on("accountNotification",this._wsOnAccountNotification.bind(this)),this._rpcWebSocket.on("programNotification",this._wsOnProgramAccountNotification.bind(this)),this._rpcWebSocket.on("slotNotification",this._wsOnSlotNotification.bind(this)),this._rpcWebSocket.on("slotsUpdatesNotification",this._wsOnSlotUpdatesNotification.bind(this)),this._rpcWebSocket.on("signatureNotification",this._wsOnSignatureNotification.bind(this)),this._rpcWebSocket.on("rootNotification",this._wsOnRootNotification.bind(this)),this._rpcWebSocket.on("logsNotification",this._wsOnLogsNotification.bind(this))}get commitment(){return this._commitment}get rpcEndpoint(){return this._rpcEndpoint}async getBalanceAndContext(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgs([e.toBase58()],r,void 0,s),o=await this._rpcRequest("getBalance",n),a=superstruct.create(o,jsonRpcResultAndContext(superstruct.number()));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get balance for ${e.toBase58()}`);return a.result}async getBalance(e,t){return await this.getBalanceAndContext(e,t).then((e=>e.value)).catch((t=>{throw new Error("failed to get balance of account "+e.toBase58()+": "+t)}))}async getBlockTime(e){const t=await this._rpcRequest("getBlockTime",[e]),r=superstruct.create(t,jsonRpcResult(superstruct.nullable(superstruct.number())));if("error"in r)throw new SolanaJSONRPCError(r.error,`failed to get block time for slot ${e}`);return r.result}async getMinimumLedgerSlot(){const e=await this._rpcRequest("minimumLedgerSlot",[]),t=superstruct.create(e,jsonRpcResult(superstruct.number()));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get minimum ledger slot");return t.result}async getFirstAvailableBlock(){const e=await this._rpcRequest("getFirstAvailableBlock",[]),t=superstruct.create(e,SlotRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get first available block");return t.result}async getSupply(e){let t={};t="string"==typeof e?{commitment:e}:e?{...e,commitment:e&&e.commitment||this.commitment}:{commitment:this.commitment};const r=await this._rpcRequest("getSupply",[t]),s=superstruct.create(r,GetSupplyRpcResult);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get supply");return s.result}async getTokenSupply(e,t){const r=this._buildArgs([e.toBase58()],t),s=await this._rpcRequest("getTokenSupply",r),n=superstruct.create(s,jsonRpcResultAndContext(TokenAmountResult));if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get token supply");return n.result}async getTokenAccountBalance(e,t){const r=this._buildArgs([e.toBase58()],t),s=await this._rpcRequest("getTokenAccountBalance",r),n=superstruct.create(s,jsonRpcResultAndContext(TokenAmountResult));if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get token account balance");return n.result}async getTokenAccountsByOwner(e,t,r){const{commitment:s,config:n}=extractCommitmentFromConfig(r);let o=[e.toBase58()];"mint"in t?o.push({mint:t.mint.toBase58()}):o.push({programId:t.programId.toBase58()});const a=this._buildArgs(o,s,"base64",n),i=await this._rpcRequest("getTokenAccountsByOwner",a),u=superstruct.create(i,GetTokenAccountsByOwner);if("error"in u)throw new SolanaJSONRPCError(u.error,`failed to get token accounts owned by account ${e.toBase58()}`);return u.result}async getParsedTokenAccountsByOwner(e,t,r){let s=[e.toBase58()];"mint"in t?s.push({mint:t.mint.toBase58()}):s.push({programId:t.programId.toBase58()});const n=this._buildArgs(s,r,"jsonParsed"),o=await this._rpcRequest("getTokenAccountsByOwner",n),a=superstruct.create(o,GetParsedTokenAccountsByOwner);if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get token accounts owned by account ${e.toBase58()}`);return a.result}async getLargestAccounts(e){const t={...e,commitment:e&&e.commitment||this.commitment},r=t.filter||t.commitment?[t]:[],s=await this._rpcRequest("getLargestAccounts",r),n=superstruct.create(s,GetLargestAccountsRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get largest accounts");return n.result}async getTokenLargestAccounts(e,t){const r=this._buildArgs([e.toBase58()],t),s=await this._rpcRequest("getTokenLargestAccounts",r),n=superstruct.create(s,GetTokenLargestAccountsResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get token largest accounts");return n.result}async getAccountInfoAndContext(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgs([e.toBase58()],r,"base64",s),o=await this._rpcRequest("getAccountInfo",n),a=superstruct.create(o,jsonRpcResultAndContext(superstruct.nullable(AccountInfoResult)));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get info about account ${e.toBase58()}`);return a.result}async getParsedAccountInfo(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgs([e.toBase58()],r,"jsonParsed",s),o=await this._rpcRequest("getAccountInfo",n),a=superstruct.create(o,jsonRpcResultAndContext(superstruct.nullable(ParsedAccountInfoResult)));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get info about account ${e.toBase58()}`);return a.result}async getAccountInfo(e,t){try{return(await this.getAccountInfoAndContext(e,t)).value}catch(t){throw new Error("failed to get info about account "+e.toBase58()+": "+t)}}async getMultipleParsedAccounts(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=e.map((e=>e.toBase58())),o=this._buildArgs([n],r,"jsonParsed",s),a=await this._rpcRequest("getMultipleAccounts",o),i=superstruct.create(a,jsonRpcResultAndContext(superstruct.array(superstruct.nullable(ParsedAccountInfoResult))));if("error"in i)throw new SolanaJSONRPCError(i.error,`failed to get info for accounts ${n}`);return i.result}async getMultipleAccountsInfoAndContext(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=e.map((e=>e.toBase58())),o=this._buildArgs([n],r,"base64",s),a=await this._rpcRequest("getMultipleAccounts",o),i=superstruct.create(a,jsonRpcResultAndContext(superstruct.array(superstruct.nullable(AccountInfoResult))));if("error"in i)throw new SolanaJSONRPCError(i.error,`failed to get info for accounts ${n}`);return i.result}async getMultipleAccountsInfo(e,t){return(await this.getMultipleAccountsInfoAndContext(e,t)).value}async getStakeActivation(e,t,r){const{commitment:s,config:n}=extractCommitmentFromConfig(t),o=this._buildArgs([e.toBase58()],s,void 0,{...n,epoch:null!=r?r:n?.epoch}),a=await this._rpcRequest("getStakeActivation",o),i=superstruct.create(a,jsonRpcResult(StakeActivationResult));if("error"in i)throw new SolanaJSONRPCError(i.error,`failed to get Stake Activation ${e.toBase58()}`);return i.result}async getProgramAccounts(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),{encoding:n,...o}=s||{},a=this._buildArgs([e.toBase58()],r,n||"base64",{...o,...o.filters?{filters:applyDefaultMemcmpEncodingToFilters(o.filters)}:null}),i=await this._rpcRequest("getProgramAccounts",a),u=superstruct.array(KeyedAccountInfoResult),c=!0===o.withContext?superstruct.create(i,jsonRpcResultAndContext(u)):superstruct.create(i,jsonRpcResult(u));if("error"in c)throw new SolanaJSONRPCError(c.error,`failed to get accounts owned by program ${e.toBase58()}`);return c.result}async getParsedProgramAccounts(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgs([e.toBase58()],r,"jsonParsed",s),o=await this._rpcRequest("getProgramAccounts",n),a=superstruct.create(o,jsonRpcResult(superstruct.array(KeyedParsedAccountInfoResult)));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get accounts owned by program ${e.toBase58()}`);return a.result}async confirmTransaction(e,t){let r,s;if("string"==typeof e)r=e;else{const t=e;if(t.abortSignal?.aborted)return Promise.reject(t.abortSignal.reason);r=t.signature}try{s=bs58__default.default.decode(r)}catch(e){throw new Error("signature must be base58 encoded: "+r)}return assert(64===s.length,"signature has invalid length"),"string"==typeof e?await this.confirmTransactionUsingLegacyTimeoutStrategy({commitment:t||this.commitment,signature:r}):"lastValidBlockHeight"in e?await this.confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:t||this.commitment,strategy:e}):await this.confirmTransactionUsingDurableNonceStrategy({commitment:t||this.commitment,strategy:e})}getCancellationPromise(e){return new Promise(((t,r)=>{null!=e&&(e.aborted?r(e.reason):e.addEventListener("abort",(()=>{r(e.reason)})))}))}getTransactionConfirmationPromise({commitment:e,signature:t}){let r,s,n=!1;return{abortConfirmation:()=>{s&&(s(),s=void 0),null!=r&&(this.removeSignatureListener(r),r=void 0)},confirmationPromise:new Promise(((o,a)=>{try{r=this.onSignature(t,((e,t)=>{r=void 0;const s={context:t,value:e};o({__type:TransactionStatus.PROCESSED,response:s})}),e);const i=new Promise((e=>{null==r?e():s=this._onSubscriptionStateChange(r,(t=>{"subscribed"===t&&e()}))}));(async()=>{if(await i,n)return;const r=await this.getSignatureStatus(t);if(n)return;if(null==r)return;const{context:s,value:u}=r;if(null!=u)if(u?.err)a(u.err);else{switch(e){case"confirmed":case"single":case"singleGossip":if("processed"===u.confirmationStatus)return;break;case"finalized":case"max":case"root":if("processed"===u.confirmationStatus||"confirmed"===u.confirmationStatus)return}n=!0,o({__type:TransactionStatus.PROCESSED,response:{context:s,value:u}})}})()}catch(e){a(e)}}))}}async confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:e,strategy:{abortSignal:t,lastValidBlockHeight:r,signature:s}}){let n=!1;const o=new Promise((t=>{const s=async()=>{try{return await this.getBlockHeight(e)}catch(e){return-1}};(async()=>{let e=await s();if(!n){for(;e<=r;){if(await sleep(1e3),n)return;if(e=await s(),n)return}t({__type:TransactionStatus.BLOCKHEIGHT_EXCEEDED})}})()})),{abortConfirmation:a,confirmationPromise:i}=this.getTransactionConfirmationPromise({commitment:e,signature:s}),u=this.getCancellationPromise(t);let c;try{const e=await Promise.race([u,i,o]);if(e.__type!==TransactionStatus.PROCESSED)throw new TransactionExpiredBlockheightExceededError(s);c=e.response}finally{n=!0,a()}return c}async confirmTransactionUsingDurableNonceStrategy({commitment:e,strategy:{abortSignal:t,minContextSlot:r,nonceAccountPubkey:s,nonceValue:n,signature:o}}){let a=!1;const i=new Promise((t=>{let o=n,i=null;const u=async()=>{try{const{context:t,value:n}=await this.getNonceAndContext(s,{commitment:e,minContextSlot:r});return i=t.slot,n?.nonce}catch(e){return o}};(async()=>{if(o=await u(),!a)for(;;){if(n!==o)return void t({__type:TransactionStatus.NONCE_INVALID,slotInWhichNonceDidAdvance:i});if(await sleep(2e3),a)return;if(o=await u(),a)return}})()})),{abortConfirmation:u,confirmationPromise:c}=this.getTransactionConfirmationPromise({commitment:e,signature:o}),l=this.getCancellationPromise(t);let p;try{const t=await Promise.race([l,c,i]);if(t.__type===TransactionStatus.PROCESSED)p=t.response;else{let s;for(;;){const e=await this.getSignatureStatus(o);if(null==e)break;if(!(e.context.slot<(t.slotInWhichNonceDidAdvance??r))){s=e;break}await sleep(400)}if(!s?.value)throw new TransactionExpiredNonceInvalidError(o);{const t=e||"finalized",{confirmationStatus:r}=s.value;switch(t){case"processed":case"recent":if("processed"!==r&&"confirmed"!==r&&"finalized"!==r)throw new TransactionExpiredNonceInvalidError(o);break;case"confirmed":case"single":case"singleGossip":if("confirmed"!==r&&"finalized"!==r)throw new TransactionExpiredNonceInvalidError(o);break;case"finalized":case"max":case"root":if("finalized"!==r)throw new TransactionExpiredNonceInvalidError(o)}p={context:s.context,value:{err:s.value.err}}}}}finally{a=!0,u()}return p}async confirmTransactionUsingLegacyTimeoutStrategy({commitment:e,signature:t}){let r;const s=new Promise((t=>{let s=this._confirmTransactionInitialTimeout||6e4;switch(e){case"processed":case"recent":case"single":case"confirmed":case"singleGossip":s=this._confirmTransactionInitialTimeout||3e4}r=setTimeout((()=>t({__type:TransactionStatus.TIMED_OUT,timeoutMs:s})),s)})),{abortConfirmation:n,confirmationPromise:o}=this.getTransactionConfirmationPromise({commitment:e,signature:t});let a;try{const e=await Promise.race([o,s]);if(e.__type!==TransactionStatus.PROCESSED)throw new TransactionExpiredTimeoutError(t,e.timeoutMs/1e3);a=e.response}finally{clearTimeout(r),n()}return a}async getClusterNodes(){const e=await this._rpcRequest("getClusterNodes",[]),t=superstruct.create(e,jsonRpcResult(superstruct.array(ContactInfoResult)));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get cluster nodes");return t.result}async getVoteAccounts(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getVoteAccounts",t),s=superstruct.create(r,GetVoteAccounts);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get vote accounts");return s.result}async getSlot(e){const{commitment:t,config:r}=extractCommitmentFromConfig(e),s=this._buildArgs([],t,void 0,r),n=await this._rpcRequest("getSlot",s),o=superstruct.create(n,jsonRpcResult(superstruct.number()));if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get slot");return o.result}async getSlotLeader(e){const{commitment:t,config:r}=extractCommitmentFromConfig(e),s=this._buildArgs([],t,void 0,r),n=await this._rpcRequest("getSlotLeader",s),o=superstruct.create(n,jsonRpcResult(superstruct.string()));if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get slot leader");return o.result}async getSlotLeaders(e,t){const r=[e,t],s=await this._rpcRequest("getSlotLeaders",r),n=superstruct.create(s,jsonRpcResult(superstruct.array(PublicKeyFromString)));if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get slot leaders");return n.result}async getSignatureStatus(e,t){const{context:r,value:s}=await this.getSignatureStatuses([e],t);assert(1===s.length);return{context:r,value:s[0]}}async getSignatureStatuses(e,t){const r=[e];t&&r.push(t);const s=await this._rpcRequest("getSignatureStatuses",r),n=superstruct.create(s,GetSignatureStatusesRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get signature status");return n.result}async getTransactionCount(e){const{commitment:t,config:r}=extractCommitmentFromConfig(e),s=this._buildArgs([],t,void 0,r),n=await this._rpcRequest("getTransactionCount",s),o=superstruct.create(n,jsonRpcResult(superstruct.number()));if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get transaction count");return o.result}async getTotalSupply(e){return(await this.getSupply({commitment:e,excludeNonCirculatingAccountsList:!0})).value.total}async getInflationGovernor(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getInflationGovernor",t),s=superstruct.create(r,GetInflationGovernorRpcResult);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get inflation");return s.result}async getInflationReward(e,t,r){const{commitment:s,config:n}=extractCommitmentFromConfig(r),o=this._buildArgs([e.map((e=>e.toBase58()))],s,void 0,{...n,epoch:null!=t?t:n?.epoch}),a=await this._rpcRequest("getInflationReward",o),i=superstruct.create(a,GetInflationRewardResult);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get inflation reward");return i.result}async getInflationRate(){const e=await this._rpcRequest("getInflationRate",[]),t=superstruct.create(e,GetInflationRateRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get inflation rate");return t.result}async getEpochInfo(e){const{commitment:t,config:r}=extractCommitmentFromConfig(e),s=this._buildArgs([],t,void 0,r),n=await this._rpcRequest("getEpochInfo",s),o=superstruct.create(n,GetEpochInfoRpcResult);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get epoch info");return o.result}async getEpochSchedule(){const e=await this._rpcRequest("getEpochSchedule",[]),t=superstruct.create(e,GetEpochScheduleRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get epoch schedule");const r=t.result;return new EpochSchedule(r.slotsPerEpoch,r.leaderScheduleSlotOffset,r.warmup,r.firstNormalEpoch,r.firstNormalSlot)}async getLeaderSchedule(){const e=await this._rpcRequest("getLeaderSchedule",[]),t=superstruct.create(e,GetLeaderScheduleRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get leader schedule");return t.result}async getMinimumBalanceForRentExemption(e,t){const r=this._buildArgs([e],t),s=await this._rpcRequest("getMinimumBalanceForRentExemption",r),n=superstruct.create(s,GetMinimumBalanceForRentExemptionRpcResult);return"error"in n?(console.warn("Unable to fetch minimum balance for rent exemption"),0):n.result}async getRecentBlockhashAndContext(e){const{context:t,value:{blockhash:r}}=await this.getLatestBlockhashAndContext(e);return{context:t,value:{blockhash:r,feeCalculator:{get lamportsPerSignature(){throw new Error("The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee for a given message.")},toJSON:()=>({})}}}}async getRecentPerformanceSamples(e){const t=await this._rpcRequest("getRecentPerformanceSamples",e?[e]:[]),r=superstruct.create(t,GetRecentPerformanceSamplesRpcResult);if("error"in r)throw new SolanaJSONRPCError(r.error,"failed to get recent performance samples");return r.result}async getFeeCalculatorForBlockhash(e,t){const r=this._buildArgs([e],t),s=await this._rpcRequest("getFeeCalculatorForBlockhash",r),n=superstruct.create(s,GetFeeCalculatorRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get fee calculator");const{context:o,value:a}=n.result;return{context:o,value:null!==a?a.feeCalculator:null}}async getFeeForMessage(e,t){const r=toBuffer(e.serialize()).toString("base64"),s=this._buildArgs([r],t),n=await this._rpcRequest("getFeeForMessage",s),o=superstruct.create(n,jsonRpcResultAndContext(superstruct.nullable(superstruct.number())));if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get fee for message");if(null===o.result)throw new Error("invalid blockhash");return o.result}async getRecentPrioritizationFees(e){const t=e?.lockedWritableAccounts?.map((e=>e.toBase58())),r=t?.length?[t]:[],s=await this._rpcRequest("getRecentPrioritizationFees",r),n=superstruct.create(s,GetRecentPrioritizationFeesRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get recent prioritization fees");return n.result}async getRecentBlockhash(e){try{return(await this.getRecentBlockhashAndContext(e)).value}catch(e){throw new Error("failed to get recent blockhash: "+e)}}async getLatestBlockhash(e){try{return(await this.getLatestBlockhashAndContext(e)).value}catch(e){throw new Error("failed to get recent blockhash: "+e)}}async getLatestBlockhashAndContext(e){const{commitment:t,config:r}=extractCommitmentFromConfig(e),s=this._buildArgs([],t,void 0,r),n=await this._rpcRequest("getLatestBlockhash",s),o=superstruct.create(n,GetLatestBlockhashRpcResult);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get latest blockhash");return o.result}async isBlockhashValid(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgs([e],r,void 0,s),o=await this._rpcRequest("isBlockhashValid",n),a=superstruct.create(o,IsBlockhashValidRpcResult);if("error"in a)throw new SolanaJSONRPCError(a.error,"failed to determine if the blockhash `"+e+"`is valid");return a.result}async getVersion(){const e=await this._rpcRequest("getVersion",[]),t=superstruct.create(e,jsonRpcResult(VersionResult));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get version");return t.result}async getGenesisHash(){const e=await this._rpcRequest("getGenesisHash",[]),t=superstruct.create(e,jsonRpcResult(superstruct.string()));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get genesis hash");return t.result}async getBlock(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgsAtLeastConfirmed([e],r,void 0,s),o=await this._rpcRequest("getBlock",n);try{switch(s?.transactionDetails){case"accounts":{const e=superstruct.create(o,GetAccountsModeBlockRpcResult);if("error"in e)throw e.error;return e.result}case"none":{const e=superstruct.create(o,GetNoneModeBlockRpcResult);if("error"in e)throw e.error;return e.result}default:{const e=superstruct.create(o,GetBlockRpcResult);if("error"in e)throw e.error;const{result:t}=e;return t?{...t,transactions:t.transactions.map((({transaction:e,meta:t,version:r})=>({meta:t,transaction:{...e,message:versionedMessageFromResponse(r,e.message)},version:r})))}:null}}}catch(e){throw new SolanaJSONRPCError(e,"failed to get confirmed block")}}async getParsedBlock(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgsAtLeastConfirmed([e],r,"jsonParsed",s),o=await this._rpcRequest("getBlock",n);try{switch(s?.transactionDetails){case"accounts":{const e=superstruct.create(o,GetParsedAccountsModeBlockRpcResult);if("error"in e)throw e.error;return e.result}case"none":{const e=superstruct.create(o,GetParsedNoneModeBlockRpcResult);if("error"in e)throw e.error;return e.result}default:{const e=superstruct.create(o,GetParsedBlockRpcResult);if("error"in e)throw e.error;return e.result}}}catch(e){throw new SolanaJSONRPCError(e,"failed to get block")}}async getBlockProduction(e){let t,r;if("string"==typeof e)r=e;else if(e){const{commitment:s,...n}=e;r=s,t=n}const s=this._buildArgs([],r,"base64",t),n=await this._rpcRequest("getBlockProduction",s),o=superstruct.create(n,BlockProductionResponseStruct);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get block production information");return o.result}async getTransaction(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgsAtLeastConfirmed([e],r,void 0,s),o=await this._rpcRequest("getTransaction",n),a=superstruct.create(o,GetTransactionRpcResult);if("error"in a)throw new SolanaJSONRPCError(a.error,"failed to get transaction");const i=a.result;return i?{...i,transaction:{...i.transaction,message:versionedMessageFromResponse(i.version,i.transaction.message)}}:i}async getParsedTransaction(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=this._buildArgsAtLeastConfirmed([e],r,"jsonParsed",s),o=await this._rpcRequest("getTransaction",n),a=superstruct.create(o,GetParsedTransactionRpcResult);if("error"in a)throw new SolanaJSONRPCError(a.error,"failed to get transaction");return a.result}async getParsedTransactions(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=e.map((e=>({methodName:"getTransaction",args:this._buildArgsAtLeastConfirmed([e],r,"jsonParsed",s)})));return(await this._rpcBatchRequest(n)).map((e=>{const t=superstruct.create(e,GetParsedTransactionRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get transactions");return t.result}))}async getTransactions(e,t){const{commitment:r,config:s}=extractCommitmentFromConfig(t),n=e.map((e=>({methodName:"getTransaction",args:this._buildArgsAtLeastConfirmed([e],r,void 0,s)})));return(await this._rpcBatchRequest(n)).map((e=>{const t=superstruct.create(e,GetTransactionRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get transactions");const r=t.result;return r?{...r,transaction:{...r.transaction,message:versionedMessageFromResponse(r.version,r.transaction.message)}}:r}))}async getConfirmedBlock(e,t){const r=this._buildArgsAtLeastConfirmed([e],t),s=await this._rpcRequest("getBlock",r),n=superstruct.create(s,GetConfirmedBlockRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get confirmed block");const o=n.result;if(!o)throw new Error("Confirmed block "+e+" not found");const a={...o,transactions:o.transactions.map((({transaction:e,meta:t})=>{const r=new Message(e.message);return{meta:t,transaction:{...e,message:r}}}))};return{...a,transactions:a.transactions.map((({transaction:e,meta:t})=>({meta:t,transaction:Transaction.populate(e.message,e.signatures)})))}}async getBlocks(e,t,r){const s=this._buildArgsAtLeastConfirmed(void 0!==t?[e,t]:[e],r),n=await this._rpcRequest("getBlocks",s),o=superstruct.create(n,jsonRpcResult(superstruct.array(superstruct.number())));if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get blocks");return o.result}async getBlockSignatures(e,t){const r=this._buildArgsAtLeastConfirmed([e],t,void 0,{transactionDetails:"signatures",rewards:!1}),s=await this._rpcRequest("getBlock",r),n=superstruct.create(s,GetBlockSignaturesRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get block");const o=n.result;if(!o)throw new Error("Block "+e+" not found");return o}async getConfirmedBlockSignatures(e,t){const r=this._buildArgsAtLeastConfirmed([e],t,void 0,{transactionDetails:"signatures",rewards:!1}),s=await this._rpcRequest("getBlock",r),n=superstruct.create(s,GetBlockSignaturesRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get confirmed block");const o=n.result;if(!o)throw new Error("Confirmed block "+e+" not found");return o}async getConfirmedTransaction(e,t){const r=this._buildArgsAtLeastConfirmed([e],t),s=await this._rpcRequest("getTransaction",r),n=superstruct.create(s,GetTransactionRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get transaction");const o=n.result;if(!o)return o;const a=new Message(o.transaction.message),i=o.transaction.signatures;return{...o,transaction:Transaction.populate(a,i)}}async getParsedConfirmedTransaction(e,t){const r=this._buildArgsAtLeastConfirmed([e],t,"jsonParsed"),s=await this._rpcRequest("getTransaction",r),n=superstruct.create(s,GetParsedTransactionRpcResult);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get confirmed transaction");return n.result}async getParsedConfirmedTransactions(e,t){const r=e.map((e=>({methodName:"getTransaction",args:this._buildArgsAtLeastConfirmed([e],t,"jsonParsed")})));return(await this._rpcBatchRequest(r)).map((e=>{const t=superstruct.create(e,GetParsedTransactionRpcResult);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get confirmed transactions");return t.result}))}async getConfirmedSignaturesForAddress(e,t,r){let s={},n=await this.getFirstAvailableBlock();for(;!("until"in s)&&!(--t<=0||t<n);)try{const e=await this.getConfirmedBlockSignatures(t,"finalized");e.signatures.length>0&&(s.until=e.signatures[e.signatures.length-1].toString())}catch(e){if(e instanceof Error&&e.message.includes("skipped"))continue;throw e}let o=await this.getSlot("finalized");for(;!("before"in s||++r>o);)try{const e=await this.getConfirmedBlockSignatures(r);e.signatures.length>0&&(s.before=e.signatures[e.signatures.length-1].toString())}catch(e){if(e instanceof Error&&e.message.includes("skipped"))continue;throw e}return(await this.getConfirmedSignaturesForAddress2(e,s)).map((e=>e.signature))}async getConfirmedSignaturesForAddress2(e,t,r){const s=this._buildArgsAtLeastConfirmed([e.toBase58()],r,void 0,t),n=await this._rpcRequest("getConfirmedSignaturesForAddress2",s),o=superstruct.create(n,GetConfirmedSignaturesForAddress2RpcResult);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get confirmed signatures for address");return o.result}async getSignaturesForAddress(e,t,r){const s=this._buildArgsAtLeastConfirmed([e.toBase58()],r,void 0,t),n=await this._rpcRequest("getSignaturesForAddress",s),o=superstruct.create(n,GetSignaturesForAddressRpcResult);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get signatures for address");return o.result}async getAddressLookupTable(e,t){const{context:r,value:s}=await this.getAccountInfoAndContext(e,t);let n=null;return null!==s&&(n=new AddressLookupTableAccount({key:e,state:AddressLookupTableAccount.deserialize(s.data)})),{context:r,value:n}}async getNonceAndContext(e,t){const{context:r,value:s}=await this.getAccountInfoAndContext(e,t);let n=null;return null!==s&&(n=NonceAccount.fromAccountData(s.data)),{context:r,value:n}}async getNonce(e,t){return await this.getNonceAndContext(e,t).then((e=>e.value)).catch((t=>{throw new Error("failed to get nonce for account "+e.toBase58()+": "+t)}))}async requestAirdrop(e,t){const r=await this._rpcRequest("requestAirdrop",[e.toBase58(),t]),s=superstruct.create(r,RequestAirdropRpcResult);if("error"in s)throw new SolanaJSONRPCError(s.error,`airdrop to ${e.toBase58()} failed`);return s.result}async _blockhashWithExpiryBlockHeight(e){if(!e){for(;this._pollingBlockhash;)await sleep(100);const e=Date.now()-this._blockhashInfo.lastFetch>=3e4;if(null!==this._blockhashInfo.latestBlockhash&&!e)return this._blockhashInfo.latestBlockhash}return await this._pollNewBlockhash()}async _pollNewBlockhash(){this._pollingBlockhash=!0;try{const e=Date.now(),t=this._blockhashInfo.latestBlockhash,r=t?t.blockhash:null;for(let e=0;e<50;e++){const e=await this.getLatestBlockhash("finalized");if(r!==e.blockhash)return this._blockhashInfo={latestBlockhash:e,lastFetch:Date.now(),transactionSignatures:[],simulatedSignatures:[]},e;await sleep(200)}throw new Error(`Unable to obtain a new blockhash after ${Date.now()-e}ms`)}finally{this._pollingBlockhash=!1}}async getStakeMinimumDelegation(e){const{commitment:t,config:r}=extractCommitmentFromConfig(e),s=this._buildArgs([],t,"base64",r),n=await this._rpcRequest("getStakeMinimumDelegation",s),o=superstruct.create(n,jsonRpcResultAndContext(superstruct.number()));if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get stake minimum delegation");return o.result}async simulateTransaction(e,t,r){if("message"in e){const s=e.serialize(),n=buffer.Buffer.from(s).toString("base64");if(Array.isArray(t)||void 0!==r)throw new Error("Invalid arguments");const o=t||{};o.encoding="base64","commitment"in o||(o.commitment=this.commitment),t&&"object"==typeof t&&"innerInstructions"in t&&(o.innerInstructions=t.innerInstructions);const a=[n,o],i=await this._rpcRequest("simulateTransaction",a),u=superstruct.create(i,SimulatedTransactionResponseStruct);if("error"in u)throw new Error("failed to simulate transaction: "+u.error.message);return u.result}let s;if(e instanceof Transaction){let t=e;s=new Transaction,s.feePayer=t.feePayer,s.instructions=e.instructions,s.nonceInfo=t.nonceInfo,s.signatures=t.signatures}else s=Transaction.populate(e),s._message=s._json=void 0;if(void 0!==t&&!Array.isArray(t))throw new Error("Invalid arguments");const n=t;if(s.nonceInfo&&n)s.sign(...n);else{let e=this._disableBlockhashCaching;for(;;){const t=await this._blockhashWithExpiryBlockHeight(e);if(s.lastValidBlockHeight=t.lastValidBlockHeight,s.recentBlockhash=t.blockhash,!n)break;if(s.sign(...n),!s.signature)throw new Error("!signature");const r=s.signature.toString("base64");if(!this._blockhashInfo.simulatedSignatures.includes(r)&&!this._blockhashInfo.transactionSignatures.includes(r)){this._blockhashInfo.simulatedSignatures.push(r);break}e=!0}}const o=s._compile(),a=o.serialize(),i=s._serialize(a).toString("base64"),u={encoding:"base64",commitment:this.commitment};if(r){const e=(Array.isArray(r)?r:o.nonProgramIds()).map((e=>e.toBase58()));u.accounts={encoding:"base64",addresses:e}}n&&(u.sigVerify=!0),t&&"object"==typeof t&&"innerInstructions"in t&&(u.innerInstructions=t.innerInstructions);const c=[i,u],l=await this._rpcRequest("simulateTransaction",c),p=superstruct.create(l,SimulatedTransactionResponseStruct);if("error"in p){let e;if("data"in p.error&&(e=p.error.data.logs,e&&Array.isArray(e))){const t="\n    ",r=t+e.join(t);console.error(p.error.message,r)}throw new SendTransactionError({action:"simulate",signature:"",transactionMessage:p.error.message,logs:e})}return p.result}async sendTransaction(e,t,r){if("version"in e){if(t&&Array.isArray(t))throw new Error("Invalid arguments");const r=e.serialize();return await this.sendRawTransaction(r,t)}if(void 0===t||!Array.isArray(t))throw new Error("Invalid arguments");const s=t;if(e.nonceInfo)e.sign(...s);else{let t=this._disableBlockhashCaching;for(;;){const r=await this._blockhashWithExpiryBlockHeight(t);if(e.lastValidBlockHeight=r.lastValidBlockHeight,e.recentBlockhash=r.blockhash,e.sign(...s),!e.signature)throw new Error("!signature");const n=e.signature.toString("base64");if(!this._blockhashInfo.transactionSignatures.includes(n)){this._blockhashInfo.transactionSignatures.push(n);break}t=!0}}const n=e.serialize();return await this.sendRawTransaction(n,r)}async sendRawTransaction(e,t){const r=toBuffer(e).toString("base64");return await this.sendEncodedTransaction(r,t)}async sendEncodedTransaction(e,t){const r={encoding:"base64"},s=t&&t.skipPreflight,n=!0===s?"processed":t&&t.preflightCommitment||this.commitment;t&&null!=t.maxRetries&&(r.maxRetries=t.maxRetries),t&&null!=t.minContextSlot&&(r.minContextSlot=t.minContextSlot),s&&(r.skipPreflight=s),n&&(r.preflightCommitment=n);const o=[e,r],a=await this._rpcRequest("sendTransaction",o),i=superstruct.create(a,SendTransactionRpcResult);if("error"in i){let e;throw"data"in i.error&&(e=i.error.data.logs),new SendTransactionError({action:s?"send":"simulate",signature:"",transactionMessage:i.error.message,logs:e})}return i.result}_wsOnOpen(){this._rpcWebSocketConnected=!0,this._rpcWebSocketHeartbeat=setInterval((()=>{(async()=>{try{await this._rpcWebSocket.notify("ping")}catch{}})()}),5e3),this._updateSubscriptions()}_wsOnError(e){this._rpcWebSocketConnected=!1,console.error("ws error:",e.message)}_wsOnClose(e){this._rpcWebSocketConnected=!1,this._rpcWebSocketGeneration=(this._rpcWebSocketGeneration+1)%Number.MAX_SAFE_INTEGER,this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null),this._rpcWebSocketHeartbeat&&(clearInterval(this._rpcWebSocketHeartbeat),this._rpcWebSocketHeartbeat=null),1e3!==e?(this._subscriptionCallbacksByServerSubscriptionId={},Object.entries(this._subscriptionsByHash).forEach((([e,t])=>{this._setSubscription(e,{...t,state:"pending"})}))):this._updateSubscriptions()}_setSubscription(e,t){const r=this._subscriptionsByHash[e]?.state;if(this._subscriptionsByHash[e]=t,r!==t.state){const r=this._subscriptionStateChangeCallbacksByHash[e];r&&r.forEach((e=>{try{e(t.state)}catch{}}))}}_onSubscriptionStateChange(e,t){const r=this._subscriptionHashByClientSubscriptionId[e];if(null==r)return()=>{};const s=this._subscriptionStateChangeCallbacksByHash[r]||=new Set;return s.add(t),()=>{s.delete(t),0===s.size&&delete this._subscriptionStateChangeCallbacksByHash[r]}}async _updateSubscriptions(){if(0===Object.keys(this._subscriptionsByHash).length)return void(this._rpcWebSocketConnected&&(this._rpcWebSocketConnected=!1,this._rpcWebSocketIdleTimeout=setTimeout((()=>{this._rpcWebSocketIdleTimeout=null;try{this._rpcWebSocket.close()}catch(e){e instanceof Error&&console.log(`Error when closing socket connection: ${e.message}`)}}),500)));if(null!==this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketConnected=!0),!this._rpcWebSocketConnected)return void this._rpcWebSocket.connect();const e=this._rpcWebSocketGeneration,t=()=>e===this._rpcWebSocketGeneration;await Promise.all(Object.keys(this._subscriptionsByHash).map((async e=>{const r=this._subscriptionsByHash[e];if(void 0!==r)switch(r.state){case"pending":case"unsubscribed":if(0===r.callbacks.size)return delete this._subscriptionsByHash[e],"unsubscribed"===r.state&&delete this._subscriptionCallbacksByServerSubscriptionId[r.serverSubscriptionId],void await this._updateSubscriptions();await(async()=>{const{args:s,method:n}=r;try{this._setSubscription(e,{...r,state:"subscribing"});const t=await this._rpcWebSocket.call(n,s);this._setSubscription(e,{...r,serverSubscriptionId:t,state:"subscribed"}),this._subscriptionCallbacksByServerSubscriptionId[t]=r.callbacks,await this._updateSubscriptions()}catch(o){if(console.error(`Received ${o instanceof Error?"":"JSON-RPC "}error calling \`${n}\``,{args:s,error:o}),!t())return;this._setSubscription(e,{...r,state:"pending"}),await this._updateSubscriptions()}})();break;case"subscribed":0===r.callbacks.size&&await(async()=>{const{serverSubscriptionId:s,unsubscribeMethod:n}=r;if(this._subscriptionsAutoDisposedByRpc.has(s))this._subscriptionsAutoDisposedByRpc.delete(s);else{this._setSubscription(e,{...r,state:"unsubscribing"}),this._setSubscription(e,{...r,state:"unsubscribing"});try{await this._rpcWebSocket.call(n,[s])}catch(s){if(s instanceof Error&&console.error(`${n} error:`,s.message),!t())return;return this._setSubscription(e,{...r,state:"subscribed"}),void await this._updateSubscriptions()}}this._setSubscription(e,{...r,state:"unsubscribed"}),await this._updateSubscriptions()})()}})))}_handleServerNotification(e,t){const r=this._subscriptionCallbacksByServerSubscriptionId[e];void 0!==r&&r.forEach((e=>{try{e(...t)}catch(e){console.error(e)}}))}_wsOnAccountNotification(e){const{result:t,subscription:r}=superstruct.create(e,AccountNotificationResult);this._handleServerNotification(r,[t.value,t.context])}_makeSubscription(e,t){const r=this._nextClientSubscriptionId++,s=fastStableStringify([e.method,t]),n=this._subscriptionsByHash[s];return void 0===n?this._subscriptionsByHash[s]={...e,args:t,callbacks:new Set([e.callback]),state:"pending"}:n.callbacks.add(e.callback),this._subscriptionHashByClientSubscriptionId[r]=s,this._subscriptionDisposeFunctionsByClientSubscriptionId[r]=async()=>{delete this._subscriptionDisposeFunctionsByClientSubscriptionId[r],delete this._subscriptionHashByClientSubscriptionId[r];const t=this._subscriptionsByHash[s];assert(void 0!==t,`Could not find a \`Subscription\` when tearing down client subscription #${r}`),t.callbacks.delete(e.callback),await this._updateSubscriptions()},this._updateSubscriptions(),r}onAccountChange(e,t,r){const{commitment:s,config:n}=extractCommitmentFromConfig(r),o=this._buildArgs([e.toBase58()],s||this._commitment||"finalized","base64",n);return this._makeSubscription({callback:t,method:"accountSubscribe",unsubscribeMethod:"accountUnsubscribe"},o)}async removeAccountChangeListener(e){await this._unsubscribeClientSubscription(e,"account change")}_wsOnProgramAccountNotification(e){const{result:t,subscription:r}=superstruct.create(e,ProgramAccountNotificationResult);this._handleServerNotification(r,[{accountId:t.value.pubkey,accountInfo:t.value.account},t.context])}onProgramAccountChange(e,t,r,s){const{commitment:n,config:o}=extractCommitmentFromConfig(r),a=this._buildArgs([e.toBase58()],n||this._commitment||"finalized","base64",o||(s?{filters:applyDefaultMemcmpEncodingToFilters(s)}:void 0));return this._makeSubscription({callback:t,method:"programSubscribe",unsubscribeMethod:"programUnsubscribe"},a)}async removeProgramAccountChangeListener(e){await this._unsubscribeClientSubscription(e,"program account change")}onLogs(e,t,r){const s=this._buildArgs(["object"==typeof e?{mentions:[e.toString()]}:e],r||this._commitment||"finalized");return this._makeSubscription({callback:t,method:"logsSubscribe",unsubscribeMethod:"logsUnsubscribe"},s)}async removeOnLogsListener(e){await this._unsubscribeClientSubscription(e,"logs")}_wsOnLogsNotification(e){const{result:t,subscription:r}=superstruct.create(e,LogsNotificationResult);this._handleServerNotification(r,[t.value,t.context])}_wsOnSlotNotification(e){const{result:t,subscription:r}=superstruct.create(e,SlotNotificationResult);this._handleServerNotification(r,[t])}onSlotChange(e){return this._makeSubscription({callback:e,method:"slotSubscribe",unsubscribeMethod:"slotUnsubscribe"},[])}async removeSlotChangeListener(e){await this._unsubscribeClientSubscription(e,"slot change")}_wsOnSlotUpdatesNotification(e){const{result:t,subscription:r}=superstruct.create(e,SlotUpdateNotificationResult);this._handleServerNotification(r,[t])}onSlotUpdate(e){return this._makeSubscription({callback:e,method:"slotsUpdatesSubscribe",unsubscribeMethod:"slotsUpdatesUnsubscribe"},[])}async removeSlotUpdateListener(e){await this._unsubscribeClientSubscription(e,"slot update")}async _unsubscribeClientSubscription(e,t){const r=this._subscriptionDisposeFunctionsByClientSubscriptionId[e];r?await r():console.warn(`Ignored unsubscribe request because an active subscription with id \`${e}\` for '${t}' events could not be found.`)}_buildArgs(e,t,r,s){const n=t||this._commitment;if(n||r||s){let t={};r&&(t.encoding=r),n&&(t.commitment=n),s&&(t=Object.assign(t,s)),e.push(t)}return e}_buildArgsAtLeastConfirmed(e,t,r,s){const n=t||this._commitment;if(n&&!["confirmed","finalized"].includes(n))throw new Error("Using Connection with default commitment: `"+this._commitment+"`, but method requires at least `confirmed`");return this._buildArgs(e,t,r,s)}_wsOnSignatureNotification(e){const{result:t,subscription:r}=superstruct.create(e,SignatureNotificationResult);"receivedSignature"!==t.value&&this._subscriptionsAutoDisposedByRpc.add(r),this._handleServerNotification(r,"receivedSignature"===t.value?[{type:"received"},t.context]:[{type:"status",result:t.value},t.context])}onSignature(e,t,r){const s=this._buildArgs([e],r||this._commitment||"finalized"),n=this._makeSubscription({callback:(e,r)=>{if("status"===e.type){t(e.result,r);try{this.removeSignatureListener(n)}catch(e){}}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},s);return n}onSignatureWithOptions(e,t,r){const{commitment:s,...n}={...r,commitment:r&&r.commitment||this._commitment||"finalized"},o=this._buildArgs([e],s,void 0,n),a=this._makeSubscription({callback:(e,r)=>{t(e,r);try{this.removeSignatureListener(a)}catch(e){}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},o);return a}async removeSignatureListener(e){await this._unsubscribeClientSubscription(e,"signature result")}_wsOnRootNotification(e){const{result:t,subscription:r}=superstruct.create(e,RootNotificationResult);this._handleServerNotification(r,[t])}onRootChange(e){return this._makeSubscription({callback:e,method:"rootSubscribe",unsubscribeMethod:"rootUnsubscribe"},[])}async removeRootChangeListener(e){await this._unsubscribeClientSubscription(e,"root change")}}class Keypair{constructor(e){this._keypair=void 0,this._keypair=e??generateKeypair()}static generate(){return new Keypair(generateKeypair())}static fromSecretKey(e,t){if(64!==e.byteLength)throw new Error("bad secret key size");const r=e.slice(32,64);if(!t||!t.skipValidation){const t=e.slice(0,32),s=getPublicKey(t);for(let e=0;e<32;e++)if(r[e]!==s[e])throw new Error("provided secretKey is invalid")}return new Keypair({publicKey:r,secretKey:e})}static fromSeed(e){const t=getPublicKey(e),r=new Uint8Array(64);return r.set(e),r.set(t,32),new Keypair({publicKey:t,secretKey:r})}get publicKey(){return new PublicKey(this._keypair.publicKey)}get secretKey(){return new Uint8Array(this._keypair.secretKey)}}const LOOKUP_TABLE_INSTRUCTION_LAYOUTS=Object.freeze({CreateLookupTable:{index:0,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),u64("recentSlot"),BufferLayout__namespace.u8("bumpSeed")])},FreezeLookupTable:{index:1,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},ExtendLookupTable:{index:2,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),u64(),BufferLayout__namespace.seq(publicKey(),BufferLayout__namespace.offset(BufferLayout__namespace.u32(),-8),"addresses")])},DeactivateLookupTable:{index:3,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},CloseLookupTable:{index:4,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])}});class AddressLookupTableInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=BufferLayout__namespace.u32("instruction").decode(e.data);let r;for(const[e,s]of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS))if(s.index==t){r=e;break}if(!r)throw new Error("Invalid Instruction. Should be a LookupTable Instruction");return r}static decodeCreateLookupTable(e){this.checkProgramId(e.programId),this.checkKeysLength(e.keys,4);const{recentSlot:t}=decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,e.data);return{authority:e.keys[1].pubkey,payer:e.keys[2].pubkey,recentSlot:Number(t)}}static decodeExtendLookupTable(e){if(this.checkProgramId(e.programId),e.keys.length<2)throw new Error(`invalid instruction; found ${e.keys.length} keys, expected at least 2`);const{addresses:t}=decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,e.data);return{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey,payer:e.keys.length>2?e.keys[2].pubkey:void 0,addresses:t.map((e=>new PublicKey(e)))}}static decodeCloseLookupTable(e){return this.checkProgramId(e.programId),this.checkKeysLength(e.keys,3),{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey,recipient:e.keys[2].pubkey}}static decodeFreezeLookupTable(e){return this.checkProgramId(e.programId),this.checkKeysLength(e.keys,2),{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey}}static decodeDeactivateLookupTable(e){return this.checkProgramId(e.programId),this.checkKeysLength(e.keys,2),{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey}}static checkProgramId(e){if(!e.equals(AddressLookupTableProgram.programId))throw new Error("invalid instruction; programId is not AddressLookupTable Program")}static checkKeysLength(e,t){if(e.length<t)throw new Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}}class AddressLookupTableProgram{constructor(){}static createLookupTable(e){const[t,r]=PublicKey.findProgramAddressSync([e.authority.toBuffer(),bigintBuffer.toBufferLE(BigInt(e.recentSlot),8)],this.programId),s=encodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,{recentSlot:BigInt(e.recentSlot),bumpSeed:r}),n=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1},{pubkey:e.payer,isSigner:!0,isWritable:!0},{pubkey:SystemProgram.programId,isSigner:!1,isWritable:!1}];return[new TransactionInstruction({programId:this.programId,keys:n,data:s}),t]}static freezeLookupTable(e){const t=encodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable),r=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1}];return new TransactionInstruction({programId:this.programId,keys:r,data:t})}static extendLookupTable(e){const t=encodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,{addresses:e.addresses.map((e=>e.toBytes()))}),r=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1}];return e.payer&&r.push({pubkey:e.payer,isSigner:!0,isWritable:!0},{pubkey:SystemProgram.programId,isSigner:!1,isWritable:!1}),new TransactionInstruction({programId:this.programId,keys:r,data:t})}static deactivateLookupTable(e){const t=encodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable),r=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1}];return new TransactionInstruction({programId:this.programId,keys:r,data:t})}static closeLookupTable(e){const t=encodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable),r=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1},{pubkey:e.recipient,isSigner:!1,isWritable:!0}];return new TransactionInstruction({programId:this.programId,keys:r,data:t})}}AddressLookupTableProgram.programId=new PublicKey("AddressLookupTab1e1111111111111111111111111");class ComputeBudgetInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=BufferLayout__namespace.u8("instruction").decode(e.data);let r;for(const[e,s]of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS))if(s.index==t){r=e;break}if(!r)throw new Error("Instruction type incorrect; not a ComputeBudgetInstruction");return r}static decodeRequestUnits(e){this.checkProgramId(e.programId);const{units:t,additionalFee:r}=decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,e.data);return{units:t,additionalFee:r}}static decodeRequestHeapFrame(e){this.checkProgramId(e.programId);const{bytes:t}=decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,e.data);return{bytes:t}}static decodeSetComputeUnitLimit(e){this.checkProgramId(e.programId);const{units:t}=decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,e.data);return{units:t}}static decodeSetComputeUnitPrice(e){this.checkProgramId(e.programId);const{microLamports:t}=decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,e.data);return{microLamports:t}}static checkProgramId(e){if(!e.equals(ComputeBudgetProgram.programId))throw new Error("invalid instruction; programId is not ComputeBudgetProgram")}}const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS=Object.freeze({RequestUnits:{index:0,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u8("instruction"),BufferLayout__namespace.u32("units"),BufferLayout__namespace.u32("additionalFee")])},RequestHeapFrame:{index:1,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u8("instruction"),BufferLayout__namespace.u32("bytes")])},SetComputeUnitLimit:{index:2,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u8("instruction"),BufferLayout__namespace.u32("units")])},SetComputeUnitPrice:{index:3,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u8("instruction"),u64("microLamports")])}});class ComputeBudgetProgram{constructor(){}static requestUnits(e){const t=encodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,e);return new TransactionInstruction({keys:[],programId:this.programId,data:t})}static requestHeapFrame(e){const t=encodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,e);return new TransactionInstruction({keys:[],programId:this.programId,data:t})}static setComputeUnitLimit(e){const t=encodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,e);return new TransactionInstruction({keys:[],programId:this.programId,data:t})}static setComputeUnitPrice(e){const t=encodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,{microLamports:BigInt(e.microLamports)});return new TransactionInstruction({keys:[],programId:this.programId,data:t})}}ComputeBudgetProgram.programId=new PublicKey("ComputeBudget111111111111111111111111111111");const PRIVATE_KEY_BYTES$1=64,PUBLIC_KEY_BYTES$1=32,SIGNATURE_BYTES=64,ED25519_INSTRUCTION_LAYOUT=BufferLayout__namespace.struct([BufferLayout__namespace.u8("numSignatures"),BufferLayout__namespace.u8("padding"),BufferLayout__namespace.u16("signatureOffset"),BufferLayout__namespace.u16("signatureInstructionIndex"),BufferLayout__namespace.u16("publicKeyOffset"),BufferLayout__namespace.u16("publicKeyInstructionIndex"),BufferLayout__namespace.u16("messageDataOffset"),BufferLayout__namespace.u16("messageDataSize"),BufferLayout__namespace.u16("messageInstructionIndex")]);class Ed25519Program{constructor(){}static createInstructionWithPublicKey(e){const{publicKey:t,message:r,signature:s,instructionIndex:n}=e;assert(32===t.length,`Public Key must be 32 bytes but received ${t.length} bytes`),assert(64===s.length,`Signature must be 64 bytes but received ${s.length} bytes`);const o=ED25519_INSTRUCTION_LAYOUT.span,a=o+t.length,i=a+s.length,u=buffer.Buffer.alloc(i+r.length),c=null==n?65535:n;return ED25519_INSTRUCTION_LAYOUT.encode({numSignatures:1,padding:0,signatureOffset:a,signatureInstructionIndex:c,publicKeyOffset:o,publicKeyInstructionIndex:c,messageDataOffset:i,messageDataSize:r.length,messageInstructionIndex:c},u),u.fill(t,o),u.fill(s,a),u.fill(r,i),new TransactionInstruction({keys:[],programId:Ed25519Program.programId,data:u})}static createInstructionWithPrivateKey(e){const{privateKey:t,message:r,instructionIndex:s}=e;assert(64===t.length,`Private key must be 64 bytes but received ${t.length} bytes`);try{const e=Keypair.fromSecretKey(t),n=e.publicKey.toBytes(),o=sign(r,e.secretKey);return this.createInstructionWithPublicKey({publicKey:n,message:r,signature:o,instructionIndex:s})}catch(e){throw new Error(`Error creating instruction; ${e}`)}}}Ed25519Program.programId=new PublicKey("Ed25519SigVerify111111111111111111111111111");const ecdsaSign=(e,t)=>{const r=secp256k1.secp256k1.sign(e,t);return[r.toCompactRawBytes(),r.recovery]};secp256k1.secp256k1.utils.isValidPrivateKey;const publicKeyCreate=secp256k1.secp256k1.getPublicKey,PRIVATE_KEY_BYTES=32,ETHEREUM_ADDRESS_BYTES=20,PUBLIC_KEY_BYTES=64,SIGNATURE_OFFSETS_SERIALIZED_SIZE=11,SECP256K1_INSTRUCTION_LAYOUT=BufferLayout__namespace.struct([BufferLayout__namespace.u8("numSignatures"),BufferLayout__namespace.u16("signatureOffset"),BufferLayout__namespace.u8("signatureInstructionIndex"),BufferLayout__namespace.u16("ethAddressOffset"),BufferLayout__namespace.u8("ethAddressInstructionIndex"),BufferLayout__namespace.u16("messageDataOffset"),BufferLayout__namespace.u16("messageDataSize"),BufferLayout__namespace.u8("messageInstructionIndex"),BufferLayout__namespace.blob(20,"ethAddress"),BufferLayout__namespace.blob(64,"signature"),BufferLayout__namespace.u8("recoveryId")]);class Secp256k1Program{constructor(){}static publicKeyToEthAddress(e){assert(64===e.length,`Public key must be 64 bytes but received ${e.length} bytes`);try{return buffer.Buffer.from(sha3.keccak_256(toBuffer(e))).slice(-20)}catch(e){throw new Error(`Error constructing Ethereum address: ${e}`)}}static createInstructionWithPublicKey(e){const{publicKey:t,message:r,signature:s,recoveryId:n,instructionIndex:o}=e;return Secp256k1Program.createInstructionWithEthAddress({ethAddress:Secp256k1Program.publicKeyToEthAddress(t),message:r,signature:s,recoveryId:n,instructionIndex:o})}static createInstructionWithEthAddress(e){const{ethAddress:t,message:r,signature:s,recoveryId:n,instructionIndex:o=0}=e;let a;a="string"==typeof t?t.startsWith("0x")?buffer.Buffer.from(t.substr(2),"hex"):buffer.Buffer.from(t,"hex"):t,assert(20===a.length,`Address must be 20 bytes but received ${a.length} bytes`);const i=12+a.length,u=i+s.length+1,c=buffer.Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span+r.length);return SECP256K1_INSTRUCTION_LAYOUT.encode({numSignatures:1,signatureOffset:i,signatureInstructionIndex:o,ethAddressOffset:12,ethAddressInstructionIndex:o,messageDataOffset:u,messageDataSize:r.length,messageInstructionIndex:o,signature:toBuffer(s),ethAddress:toBuffer(a),recoveryId:n},c),c.fill(toBuffer(r),SECP256K1_INSTRUCTION_LAYOUT.span),new TransactionInstruction({keys:[],programId:Secp256k1Program.programId,data:c})}static createInstructionWithPrivateKey(e){const{privateKey:t,message:r,instructionIndex:s}=e;assert(32===t.length,`Private key must be 32 bytes but received ${t.length} bytes`);try{const e=toBuffer(t),n=publicKeyCreate(e,!1).slice(1),o=buffer.Buffer.from(sha3.keccak_256(toBuffer(r))),[a,i]=ecdsaSign(o,e);return this.createInstructionWithPublicKey({publicKey:n,message:r,signature:a,recoveryId:i,instructionIndex:s})}catch(e){throw new Error(`Error creating instruction; ${e}`)}}}var _Lockup;Secp256k1Program.programId=new PublicKey("KeccakSecp256k11111111111111111111111111111");const STAKE_CONFIG_ID=new PublicKey("StakeConfig11111111111111111111111111111111");class Authorized{constructor(e,t){this.staker=void 0,this.withdrawer=void 0,this.staker=e,this.withdrawer=t}}class Lockup{constructor(e,t,r){this.unixTimestamp=void 0,this.epoch=void 0,this.custodian=void 0,this.unixTimestamp=e,this.epoch=t,this.custodian=r}}_Lockup=Lockup,Lockup.default=new _Lockup(0,0,PublicKey.default);class StakeInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=BufferLayout__namespace.u32("instruction").decode(e.data);let r;for(const[e,s]of Object.entries(STAKE_INSTRUCTION_LAYOUTS))if(s.index==t){r=e;break}if(!r)throw new Error("Instruction type incorrect; not a StakeInstruction");return r}static decodeInitialize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{authorized:t,lockup:r}=decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize,e.data);return{stakePubkey:e.keys[0].pubkey,authorized:new Authorized(new PublicKey(t.staker),new PublicKey(t.withdrawer)),lockup:new Lockup(r.unixTimestamp,r.epoch,new PublicKey(r.custodian))}}static decodeDelegate(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,6),decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate,e.data),{stakePubkey:e.keys[0].pubkey,votePubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[5].pubkey}}static decodeAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{newAuthorized:t,stakeAuthorizationType:r}=decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize,e.data),s={stakePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey,newAuthorizedPubkey:new PublicKey(t),stakeAuthorizationType:{index:r}};return e.keys.length>3&&(s.custodianPubkey=e.keys[3].pubkey),s}static decodeAuthorizeWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{newAuthorized:t,stakeAuthorizationType:r,authoritySeed:s,authorityOwner:n}=decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,e.data),o={stakePubkey:e.keys[0].pubkey,authorityBase:e.keys[1].pubkey,authoritySeed:s,authorityOwner:new PublicKey(n),newAuthorizedPubkey:new PublicKey(t),stakeAuthorizationType:{index:r}};return e.keys.length>3&&(o.custodianPubkey=e.keys[3].pubkey),o}static decodeSplit(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{lamports:t}=decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split,e.data);return{stakePubkey:e.keys[0].pubkey,splitStakePubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[2].pubkey,lamports:t}}static decodeMerge(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge,e.data),{stakePubkey:e.keys[0].pubkey,sourceStakePubKey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey}}static decodeWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,5);const{lamports:t}=decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw,e.data),r={stakePubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey,lamports:t};return e.keys.length>5&&(r.custodianPubkey=e.keys[5].pubkey),r}static decodeDeactivate(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate,e.data),{stakePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey}}static checkProgramId(e){if(!e.equals(StakeProgram.programId))throw new Error("invalid instruction; programId is not StakeProgram")}static checkKeyLength(e,t){if(e.length<t)throw new Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}}const STAKE_INSTRUCTION_LAYOUTS=Object.freeze({Initialize:{index:0,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),authorized(),lockup()])},Authorize:{index:1,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("newAuthorized"),BufferLayout__namespace.u32("stakeAuthorizationType")])},Delegate:{index:2,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},Split:{index:3,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.ns64("lamports")])},Withdraw:{index:4,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.ns64("lamports")])},Deactivate:{index:5,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},Merge:{index:7,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},AuthorizeWithSeed:{index:8,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("newAuthorized"),BufferLayout__namespace.u32("stakeAuthorizationType"),rustString("authoritySeed"),publicKey("authorityOwner")])}}),StakeAuthorizationLayout=Object.freeze({Staker:{index:0},Withdrawer:{index:1}});class StakeProgram{constructor(){}static initialize(e){const{stakePubkey:t,authorized:r,lockup:s}=e,n=s||Lockup.default,o=encodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize,{authorized:{staker:toBuffer(r.staker.toBuffer()),withdrawer:toBuffer(r.withdrawer.toBuffer())},lockup:{unixTimestamp:n.unixTimestamp,epoch:n.epoch,custodian:toBuffer(n.custodian.toBuffer())}}),a={keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1}],programId:this.programId,data:o};return new TransactionInstruction(a)}static createAccountWithSeed(e){const t=new Transaction;t.add(SystemProgram.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.stakePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:s,lockup:n}=e;return t.add(this.initialize({stakePubkey:r,authorized:s,lockup:n}))}static createAccount(e){const t=new Transaction;t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.stakePubkey,lamports:e.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:s,lockup:n}=e;return t.add(this.initialize({stakePubkey:r,authorized:s,lockup:n}))}static delegate(e){const{stakePubkey:t,authorizedPubkey:r,votePubkey:s}=e,n=encodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate);return(new Transaction).add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_STAKE_HISTORY_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:STAKE_CONFIG_ID,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:n})}static authorize(e){const{stakePubkey:t,authorizedPubkey:r,newAuthorizedPubkey:s,stakeAuthorizationType:n,custodianPubkey:o}=e,a=encodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize,{newAuthorized:toBuffer(s.toBuffer()),stakeAuthorizationType:n.index}),i=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return o&&i.push({pubkey:o,isSigner:!0,isWritable:!1}),(new Transaction).add({keys:i,programId:this.programId,data:a})}static authorizeWithSeed(e){const{stakePubkey:t,authorityBase:r,authoritySeed:s,authorityOwner:n,newAuthorizedPubkey:o,stakeAuthorizationType:a,custodianPubkey:i}=e,u=encodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,{newAuthorized:toBuffer(o.toBuffer()),stakeAuthorizationType:a.index,authoritySeed:s,authorityOwner:toBuffer(n.toBuffer())}),c=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1}];return i&&c.push({pubkey:i,isSigner:!0,isWritable:!1}),(new Transaction).add({keys:c,programId:this.programId,data:u})}static splitInstruction(e){const{stakePubkey:t,authorizedPubkey:r,splitStakePubkey:s,lamports:n}=e,o=encodeData(STAKE_INSTRUCTION_LAYOUTS.Split,{lamports:n});return new TransactionInstruction({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:o})}static split(e,t){const r=new Transaction;return r.add(SystemProgram.createAccount({fromPubkey:e.authorizedPubkey,newAccountPubkey:e.splitStakePubkey,lamports:t,space:this.space,programId:this.programId})),r.add(this.splitInstruction(e))}static splitWithSeed(e,t){const{stakePubkey:r,authorizedPubkey:s,splitStakePubkey:n,basePubkey:o,seed:a,lamports:i}=e,u=new Transaction;return u.add(SystemProgram.allocate({accountPubkey:n,basePubkey:o,seed:a,space:this.space,programId:this.programId})),t&&t>0&&u.add(SystemProgram.transfer({fromPubkey:e.authorizedPubkey,toPubkey:n,lamports:t})),u.add(this.splitInstruction({stakePubkey:r,authorizedPubkey:s,splitStakePubkey:n,lamports:i}))}static merge(e){const{stakePubkey:t,sourceStakePubKey:r,authorizedPubkey:s}=e,n=encodeData(STAKE_INSTRUCTION_LAYOUTS.Merge);return(new Transaction).add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_STAKE_HISTORY_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:s,isSigner:!0,isWritable:!1}],programId:this.programId,data:n})}static withdraw(e){const{stakePubkey:t,authorizedPubkey:r,toPubkey:s,lamports:n,custodianPubkey:o}=e,a=encodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw,{lamports:n}),i=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_STAKE_HISTORY_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return o&&i.push({pubkey:o,isSigner:!0,isWritable:!1}),(new Transaction).add({keys:i,programId:this.programId,data:a})}static deactivate(e){const{stakePubkey:t,authorizedPubkey:r}=e,s=encodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate);return(new Transaction).add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:s})}}StakeProgram.programId=new PublicKey("Stake11111111111111111111111111111111111111"),StakeProgram.space=200;class VoteInit{constructor(e,t,r,s){this.nodePubkey=void 0,this.authorizedVoter=void 0,this.authorizedWithdrawer=void 0,this.commission=void 0,this.nodePubkey=e,this.authorizedVoter=t,this.authorizedWithdrawer=r,this.commission=s}}class VoteInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=BufferLayout__namespace.u32("instruction").decode(e.data);let r;for(const[e,s]of Object.entries(VOTE_INSTRUCTION_LAYOUTS))if(s.index==t){r=e;break}if(!r)throw new Error("Instruction type incorrect; not a VoteInstruction");return r}static decodeInitializeAccount(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,4);const{voteInit:t}=decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,e.data);return{votePubkey:e.keys[0].pubkey,nodePubkey:e.keys[3].pubkey,voteInit:new VoteInit(new PublicKey(t.nodePubkey),new PublicKey(t.authorizedVoter),new PublicKey(t.authorizedWithdrawer),t.commission)}}static decodeAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{newAuthorized:t,voteAuthorizationType:r}=decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize,e.data);return{votePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey,newAuthorizedPubkey:new PublicKey(t),voteAuthorizationType:{index:r}}}static decodeAuthorizeWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:t,currentAuthorityDerivedKeySeed:r,newAuthorized:s,voteAuthorizationType:n}}=decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,e.data);return{currentAuthorityDerivedKeyBasePubkey:e.keys[2].pubkey,currentAuthorityDerivedKeyOwnerPubkey:new PublicKey(t),currentAuthorityDerivedKeySeed:r,newAuthorizedPubkey:new PublicKey(s),voteAuthorizationType:{index:n},votePubkey:e.keys[0].pubkey}}static decodeWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{lamports:t}=decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw,e.data);return{votePubkey:e.keys[0].pubkey,authorizedWithdrawerPubkey:e.keys[2].pubkey,lamports:t,toPubkey:e.keys[1].pubkey}}static checkProgramId(e){if(!e.equals(VoteProgram.programId))throw new Error("invalid instruction; programId is not VoteProgram")}static checkKeyLength(e,t){if(e.length<t)throw new Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}}const VOTE_INSTRUCTION_LAYOUTS=Object.freeze({InitializeAccount:{index:0,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),voteInit()])},Authorize:{index:1,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),publicKey("newAuthorized"),BufferLayout__namespace.u32("voteAuthorizationType")])},Withdraw:{index:3,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),BufferLayout__namespace.ns64("lamports")])},UpdateValidatorIdentity:{index:4,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction")])},AuthorizeWithSeed:{index:10,layout:BufferLayout__namespace.struct([BufferLayout__namespace.u32("instruction"),voteAuthorizeWithSeedArgs()])}}),VoteAuthorizationLayout=Object.freeze({Voter:{index:0},Withdrawer:{index:1}});class VoteProgram{constructor(){}static initializeAccount(e){const{votePubkey:t,nodePubkey:r,voteInit:s}=e,n=encodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,{voteInit:{nodePubkey:toBuffer(s.nodePubkey.toBuffer()),authorizedVoter:toBuffer(s.authorizedVoter.toBuffer()),authorizedWithdrawer:toBuffer(s.authorizedWithdrawer.toBuffer()),commission:s.commission}}),o={keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:n};return new TransactionInstruction(o)}static createAccount(e){const t=new Transaction;return t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.votePubkey,lamports:e.lamports,space:this.space,programId:this.programId})),t.add(this.initializeAccount({votePubkey:e.votePubkey,nodePubkey:e.voteInit.nodePubkey,voteInit:e.voteInit}))}static authorize(e){const{votePubkey:t,authorizedPubkey:r,newAuthorizedPubkey:s,voteAuthorizationType:n}=e,o=encodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize,{newAuthorized:toBuffer(s.toBuffer()),voteAuthorizationType:n.index}),a=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return(new Transaction).add({keys:a,programId:this.programId,data:o})}static authorizeWithSeed(e){const{currentAuthorityDerivedKeyBasePubkey:t,currentAuthorityDerivedKeyOwnerPubkey:r,currentAuthorityDerivedKeySeed:s,newAuthorizedPubkey:n,voteAuthorizationType:o,votePubkey:a}=e,i=encodeData(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:toBuffer(r.toBuffer()),currentAuthorityDerivedKeySeed:s,newAuthorized:toBuffer(n.toBuffer()),voteAuthorizationType:o.index}}),u=[{pubkey:a,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:t,isSigner:!0,isWritable:!1}];return(new Transaction).add({keys:u,programId:this.programId,data:i})}static withdraw(e){const{votePubkey:t,authorizedWithdrawerPubkey:r,lamports:s,toPubkey:n}=e,o=encodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw,{lamports:s}),a=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return(new Transaction).add({keys:a,programId:this.programId,data:o})}static safeWithdraw(e,t,r){if(e.lamports>t-r)throw new Error("Withdraw will leave vote account with insufficient funds.");return VoteProgram.withdraw(e)}static updateValidatorIdentity(e){const{votePubkey:t,authorizedWithdrawerPubkey:r,nodePubkey:s}=e,n=encodeData(VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity),o=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!0,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return(new Transaction).add({keys:o,programId:this.programId,data:n})}}VoteProgram.programId=new PublicKey("Vote111111111111111111111111111111111111111"),VoteProgram.space=3762;const VALIDATOR_INFO_KEY=new PublicKey("Va1idator1nfo111111111111111111111111111111"),InfoString=superstruct.type({name:superstruct.string(),website:superstruct.optional(superstruct.string()),details:superstruct.optional(superstruct.string()),iconUrl:superstruct.optional(superstruct.string()),keybaseUsername:superstruct.optional(superstruct.string())});class ValidatorInfo{constructor(e,t){this.key=void 0,this.info=void 0,this.key=e,this.info=t}static fromConfigData(e){let t=[...e];if(2!==decodeLength(t))return null;const r=[];for(let e=0;e<2;e++){const e=new PublicKey(guardedSplice(t,0,32)),s=1===guardedShift(t);r.push({publicKey:e,isSigner:s})}if(r[0].publicKey.equals(VALIDATOR_INFO_KEY)&&r[1].isSigner){const e=rustString().decode(buffer.Buffer.from(t)),s=JSON.parse(e);return superstruct.assert(s,InfoString),new ValidatorInfo(r[1].publicKey,s)}return null}}const VOTE_PROGRAM_ID=new PublicKey("Vote111111111111111111111111111111111111111"),VoteAccountLayout=BufferLayout__namespace.struct([publicKey("nodePubkey"),publicKey("authorizedWithdrawer"),BufferLayout__namespace.u8("commission"),BufferLayout__namespace.nu64(),BufferLayout__namespace.seq(BufferLayout__namespace.struct([BufferLayout__namespace.nu64("slot"),BufferLayout__namespace.u32("confirmationCount")]),BufferLayout__namespace.offset(BufferLayout__namespace.u32(),-8),"votes"),BufferLayout__namespace.u8("rootSlotValid"),BufferLayout__namespace.nu64("rootSlot"),BufferLayout__namespace.nu64(),BufferLayout__namespace.seq(BufferLayout__namespace.struct([BufferLayout__namespace.nu64("epoch"),publicKey("authorizedVoter")]),BufferLayout__namespace.offset(BufferLayout__namespace.u32(),-8),"authorizedVoters"),BufferLayout__namespace.struct([BufferLayout__namespace.seq(BufferLayout__namespace.struct([publicKey("authorizedPubkey"),BufferLayout__namespace.nu64("epochOfLastAuthorizedSwitch"),BufferLayout__namespace.nu64("targetEpoch")]),32,"buf"),BufferLayout__namespace.nu64("idx"),BufferLayout__namespace.u8("isEmpty")],"priorVoters"),BufferLayout__namespace.nu64(),BufferLayout__namespace.seq(BufferLayout__namespace.struct([BufferLayout__namespace.nu64("epoch"),BufferLayout__namespace.nu64("credits"),BufferLayout__namespace.nu64("prevCredits")]),BufferLayout__namespace.offset(BufferLayout__namespace.u32(),-8),"epochCredits"),BufferLayout__namespace.struct([BufferLayout__namespace.nu64("slot"),BufferLayout__namespace.nu64("timestamp")],"lastTimestamp")]);class VoteAccount{constructor(e){this.nodePubkey=void 0,this.authorizedWithdrawer=void 0,this.commission=void 0,this.rootSlot=void 0,this.votes=void 0,this.authorizedVoters=void 0,this.priorVoters=void 0,this.epochCredits=void 0,this.lastTimestamp=void 0,this.nodePubkey=e.nodePubkey,this.authorizedWithdrawer=e.authorizedWithdrawer,this.commission=e.commission,this.rootSlot=e.rootSlot,this.votes=e.votes,this.authorizedVoters=e.authorizedVoters,this.priorVoters=e.priorVoters,this.epochCredits=e.epochCredits,this.lastTimestamp=e.lastTimestamp}static fromAccountData(e){const t=VoteAccountLayout.decode(toBuffer(e),4);let r=t.rootSlot;return t.rootSlotValid||(r=null),new VoteAccount({nodePubkey:new PublicKey(t.nodePubkey),authorizedWithdrawer:new PublicKey(t.authorizedWithdrawer),commission:t.commission,votes:t.votes,rootSlot:r,authorizedVoters:t.authorizedVoters.map(parseAuthorizedVoter),priorVoters:getPriorVoters(t.priorVoters),epochCredits:t.epochCredits,lastTimestamp:t.lastTimestamp})}}function parseAuthorizedVoter({authorizedVoter:e,epoch:t}){return{epoch:t,authorizedVoter:new PublicKey(e)}}function parsePriorVoters({authorizedPubkey:e,epochOfLastAuthorizedSwitch:t,targetEpoch:r}){return{authorizedPubkey:new PublicKey(e),epochOfLastAuthorizedSwitch:t,targetEpoch:r}}function getPriorVoters({buf:e,idx:t,isEmpty:r}){return r?[]:[...e.slice(t+1).map(parsePriorVoters),...e.slice(0,t).map(parsePriorVoters)]}const endpoint={http:{devnet:"http://api.devnet.solana.com",testnet:"http://api.testnet.solana.com","mainnet-beta":"http://api.mainnet-beta.solana.com/"},https:{devnet:"https://api.devnet.solana.com",testnet:"https://api.testnet.solana.com","mainnet-beta":"https://api.mainnet-beta.solana.com/"}};function clusterApiUrl(e,t){const r=!1===t?"http":"https";if(!e)return endpoint[r].devnet;const s=endpoint[r][e];if(!s)throw new Error(`Unknown ${r} cluster: ${e}`);return s}async function sendAndConfirmRawTransaction(e,t,r,s){let n,o;r&&Object.prototype.hasOwnProperty.call(r,"lastValidBlockHeight")||r&&Object.prototype.hasOwnProperty.call(r,"nonceValue")?(n=r,o=s):o=r;const a=o&&{skipPreflight:o.skipPreflight,preflightCommitment:o.preflightCommitment||o.commitment,minContextSlot:o.minContextSlot},i=await e.sendRawTransaction(t,a),u=o&&o.commitment,c=n?e.confirmTransaction(n,u):e.confirmTransaction(i,u),l=(await c).value;if(l.err){if(null!=i)throw new SendTransactionError({action:a?.skipPreflight?"send":"simulate",signature:i,transactionMessage:`Status: (${JSON.stringify(l)})`});throw new Error(`Raw transaction ${i} failed (${JSON.stringify(l)})`)}return i}const LAMPORTS_PER_SOL=1e9;exports.Account=Account,exports.AddressLookupTableAccount=AddressLookupTableAccount,exports.AddressLookupTableInstruction=AddressLookupTableInstruction,exports.AddressLookupTableProgram=AddressLookupTableProgram,exports.Authorized=Authorized,exports.BLOCKHASH_CACHE_TIMEOUT_MS=3e4,exports.BPF_LOADER_DEPRECATED_PROGRAM_ID=BPF_LOADER_DEPRECATED_PROGRAM_ID,exports.BPF_LOADER_PROGRAM_ID=BPF_LOADER_PROGRAM_ID,exports.BpfLoader=BpfLoader,exports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS=COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,exports.ComputeBudgetInstruction=ComputeBudgetInstruction,exports.ComputeBudgetProgram=ComputeBudgetProgram,exports.Connection=Connection,exports.Ed25519Program=Ed25519Program,exports.Enum=Enum,exports.EpochSchedule=EpochSchedule,exports.FeeCalculatorLayout=FeeCalculatorLayout,exports.Keypair=Keypair,exports.LAMPORTS_PER_SOL=1e9,exports.LOOKUP_TABLE_INSTRUCTION_LAYOUTS=LOOKUP_TABLE_INSTRUCTION_LAYOUTS,exports.Loader=Loader,exports.Lockup=Lockup,exports.MAX_SEED_LENGTH=32,exports.Message=Message,exports.MessageAccountKeys=MessageAccountKeys,exports.MessageV0=MessageV0,exports.NONCE_ACCOUNT_LENGTH=NONCE_ACCOUNT_LENGTH,exports.NonceAccount=NonceAccount,exports.PACKET_DATA_SIZE=1232,exports.PUBLIC_KEY_LENGTH=32,exports.PublicKey=PublicKey,exports.SIGNATURE_LENGTH_IN_BYTES=64,exports.SOLANA_SCHEMA=SOLANA_SCHEMA,exports.STAKE_CONFIG_ID=STAKE_CONFIG_ID,exports.STAKE_INSTRUCTION_LAYOUTS=STAKE_INSTRUCTION_LAYOUTS,exports.SYSTEM_INSTRUCTION_LAYOUTS=SYSTEM_INSTRUCTION_LAYOUTS,exports.SYSVAR_CLOCK_PUBKEY=SYSVAR_CLOCK_PUBKEY,exports.SYSVAR_EPOCH_SCHEDULE_PUBKEY=SYSVAR_EPOCH_SCHEDULE_PUBKEY,exports.SYSVAR_INSTRUCTIONS_PUBKEY=SYSVAR_INSTRUCTIONS_PUBKEY,exports.SYSVAR_RECENT_BLOCKHASHES_PUBKEY=SYSVAR_RECENT_BLOCKHASHES_PUBKEY,exports.SYSVAR_RENT_PUBKEY=SYSVAR_RENT_PUBKEY,exports.SYSVAR_REWARDS_PUBKEY=SYSVAR_REWARDS_PUBKEY,exports.SYSVAR_SLOT_HASHES_PUBKEY=SYSVAR_SLOT_HASHES_PUBKEY,exports.SYSVAR_SLOT_HISTORY_PUBKEY=SYSVAR_SLOT_HISTORY_PUBKEY,exports.SYSVAR_STAKE_HISTORY_PUBKEY=SYSVAR_STAKE_HISTORY_PUBKEY,exports.Secp256k1Program=Secp256k1Program,exports.SendTransactionError=SendTransactionError,exports.SolanaJSONRPCError=SolanaJSONRPCError,exports.SolanaJSONRPCErrorCode=SolanaJSONRPCErrorCode,exports.StakeAuthorizationLayout=StakeAuthorizationLayout,exports.StakeInstruction=StakeInstruction,exports.StakeProgram=StakeProgram,exports.Struct=Struct,exports.SystemInstruction=SystemInstruction,exports.SystemProgram=SystemProgram,exports.Transaction=Transaction,exports.TransactionExpiredBlockheightExceededError=TransactionExpiredBlockheightExceededError,exports.TransactionExpiredNonceInvalidError=TransactionExpiredNonceInvalidError,exports.TransactionExpiredTimeoutError=TransactionExpiredTimeoutError,exports.TransactionInstruction=TransactionInstruction,exports.TransactionMessage=TransactionMessage,exports.TransactionStatus=TransactionStatus,exports.VALIDATOR_INFO_KEY=VALIDATOR_INFO_KEY,exports.VERSION_PREFIX_MASK=127,exports.VOTE_PROGRAM_ID=VOTE_PROGRAM_ID,exports.ValidatorInfo=ValidatorInfo,exports.VersionedMessage=VersionedMessage,exports.VersionedTransaction=VersionedTransaction,exports.VoteAccount=VoteAccount,exports.VoteAuthorizationLayout=VoteAuthorizationLayout,exports.VoteInit=VoteInit,exports.VoteInstruction=VoteInstruction,exports.VoteProgram=VoteProgram,exports.clusterApiUrl=clusterApiUrl,exports.sendAndConfirmRawTransaction=sendAndConfirmRawTransaction,exports.sendAndConfirmTransaction=sendAndConfirmTransaction;
//# sourceMappingURL=/sm/fcd96ff2391db0e38f617681aa84d6c8e0e888cac2d4dd96d9956d78ab596b1e.map